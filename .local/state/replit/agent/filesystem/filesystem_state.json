{"file_contents":{"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack hotel management system built with React (frontend) and Express.js (backend). The application provides a complete solution for managing hotel operations including customer management, service requests, and analytics. The system features a modern dashboard interface with real-time updates via WebSocket connections and uses a simple admin/password authentication system (admin/password) for user management. Successfully migrated from Replit Agent to standard Replit environment with MongoDB database persistence.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# Recent Changes (September 2, 2025)\n\n✅ **Vercel Deployment Structure Completed**\n- Successfully restructured application for Vercel serverless deployment\n- Moved all Express.js routes to `/api` directory as serverless functions\n- Created comprehensive API endpoints: hotel, customers, service-requests, analytics, room-types\n- Moved client files to root level with proper build configuration\n- Added `vercel.json` configuration for proper routing and function handling\n- All MongoDB operations now work with Vercel's serverless architecture\n- CORS handling implemented for cross-origin requests\n\n✅ **API Serverless Functions Created**\n- `/api/hotel.ts` - Hotel management (GET, POST, PUT)\n- `/api/customers.ts` - Customer operations (GET, POST, PUT, DELETE)\n- `/api/service-requests.ts` - Service request handling with MongoDB ObjectId validation\n- `/api/admin-services.ts` - Staff service assignment and completion tracking\n- `/api/room-types.ts` - Room availability and pricing management\n- `/api/login.ts` - Authentication with bcrypt password hashing\n- `/api/register.ts` - Hotel registration with admin account creation\n- `/api/analytics/*` - Stats and service analytics endpoints\n- All functions include proper error handling and CORS support\n\n✅ **Database & Authentication Ready**\n- MongoDB connection optimized for serverless functions\n- Hotel admin authentication system fully functional\n- Multi-hotel isolation maintained across all endpoints\n- Password hashing with bcrypt for secure authentication\n- Session management adapted for serverless deployment\n\n# Recent Changes (August 16, 2025)\n\n✅ **Migration Completed Successfully**\n- Migrated hotel management system from Replit Agent to standard Replit environment\n- Implemented multi-hotel authentication system with user registration\n- Created registration form for new hotels with individual admin accounts\n- Fixed customer creation functionality - customers now persist in MongoDB database\n- Customer data persists across multiple hotel websites using shared MongoDB backend\n- All core features working: customer management, service requests, analytics dashboard\n\n✅ **Multi-Hotel Authentication System**\n- Replaced simple admin/password with comprehensive registration system\n- Each hotel can create their own admin account with unique credentials\n- Hotels are isolated - each admin only sees their own hotel's data\n- Registration automatically creates hotel with default room types\n- Simple flow: new hotels register → login with credentials → access dashboard\n- Existing hotels login directly with their credentials\n\n✅ **Comprehensive Room Management System**\n- Implemented complete room type system with categories (standard, deluxe, suite, studio)\n- Added room availability tracking - 5 rooms per type, booking reduces available count\n- Room types include: single, double, twin, triple, and various suites (junior, executive, presidential)\n- Room pricing varies by type and category (₹2,500-8,500 per night)\n- Customer check-in now requires room type selection with dynamic pricing display\n- Created dedicated Rooms page to monitor availability and room types\n- Auto-generates default room types when creating a new hotel\n\n✅ **Revenue Tracking System**\n- Replaced monthly revenue with total revenue calculation based on actual bookings\n- Revenue calculated from individual customer room prices\n- Dashboard displays real-time total revenue from all customer bookings\n- Analytics include comprehensive statistics with revenue metrics\n\n✅ **Technical Fixes Applied**\n- Fixed session secret configuration issue\n- Resolved TypeScript WebSocket errors and MongoDB type casting\n- Fixed customer form validation schema with room type integration\n- Implemented proper date/time handling for check-ins using Indian Standard Time (IST)\n- Real-time updates via WebSocket connections working\n- Added room type API endpoints and storage operations\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript and Vite as the build tool\n- **UI Components**: Built with shadcn/ui component library using Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and CSS variables\n- **State Management**: TanStack Query (React Query) for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n- **Real-time Communication**: WebSocket client for live updates\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured error handling and logging\n- **Real-time Features**: WebSocket server for live notifications and updates\n- **Session Management**: Express sessions with in-memory storage\n\n## Data Storage\n- **Database**: MongoDB with cloud hosting (MongoDB Atlas)\n- **ODM**: Mongoose for schema-based data modeling and operations\n- **Schema**: Organized in shared directory for frontend/backend consistency\n- **Connection**: Secure environment variable-based connection string\n\n## Authentication & Authorization\n- **Provider**: Replit's OpenID Connect (OIDC) authentication system\n- **Strategy**: Passport.js with OpenID Connect strategy\n- **Session Storage**: Memory-based sessions for development environment\n- **User Management**: Automatic user creation and profile management\n\n## Development Architecture\n- **Monorepo Structure**: Client, server, and shared code in organized directories\n- **Hot Reload**: Vite development server with HMR\n- **TypeScript**: Strict type checking across the entire stack\n- **Path Aliases**: Configured for clean imports (`@/`, `@shared/`)\n\n## Key Features\n- **Hotel Management**: Single hotel per user with configurable properties\n- **Customer Management**: Check-in/check-out tracking with guest information\n- **Service Requests**: Categorized requests (maintenance, housekeeping, etc.) with status tracking\n- **Analytics**: Real-time statistics and occupancy metrics\n- **Real-time Updates**: Live notifications for new requests and status changes\n\n# External Dependencies\n\n## Database & Storage\n- **MongoDB Atlas**: Cloud-hosted MongoDB database with connection pooling\n- **Mongoose**: Object Document Modeling library for schema-based operations\n\n## Authentication\n- **Replit Auth**: OpenID Connect authentication provider\n- **Passport.js**: Authentication middleware for Express\n\n## UI & Styling\n- **shadcn/ui**: Pre-built accessible component library\n- **Radix UI**: Primitive components for complex UI elements\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide Icons**: Icon library for consistent iconography\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across the entire application\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n## Runtime & Hosting\n- **Replit**: Development and hosting platform with built-in authentication\n- **WebSocket**: Real-time communication using native WebSocket API\n- **Express.js**: Web application framework for Node.js","size_bytes":7711},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      fontFamily: {\n        sans: ['Inter', 'sans-serif'],\n        serif: ['Georgia', 'serif'],\n        mono: ['Menlo', 'monospace'],\n      },\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: '#eff6ff',\n          500: '#3b82f6',\n          600: '#2563eb',\n          700: '#1d4ed8',\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2873},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import mongoose from 'mongoose';\n\n// For development in Replit, use a local MongoDB connection or skip database initialization\n// For production/Vercel, use environment variable\nconst MONGODB_URI = process.env.MONGODB_URI || \n                   (process.env.NODE_ENV === 'production' \n                     ? undefined \n                     : 'mongodb+srv://abhijeet18012001:SCeJSjgqac7DmdS5@hotel.d1juzfe.mongodb.net/?retryWrites=true&w=majority&appName=Hotel');\n\n// Connection function\nexport async function connectDB() {\n  try {\n    if (!MONGODB_URI) {\n      if (process.env.NODE_ENV === 'production') {\n        throw new Error('MONGODB_URI environment variable is required for production');\n      } else {\n        console.warn('No MongoDB URI configured. Database operations will be disabled.');\n        return;\n      }\n    }\n\n    if (mongoose.connection.readyState >= 1) {\n      return;\n    }\n    \n    await mongoose.connect(MONGODB_URI, {\n      maxPoolSize: 10,\n      serverSelectionTimeoutMS: 5000,\n      socketTimeoutMS: 45000,\n    });\n    console.log('Connected to MongoDB successfully');\n  } catch (error) {\n    console.error('MongoDB connection error:', error);\n    if (process.env.NODE_ENV === 'production') {\n      throw error;\n    } else {\n      console.warn('Database connection failed in development mode. Continuing without database.');\n    }\n  }\n}\n\n// Initialize connection\nconnectDB();\n\nexport { mongoose };","size_bytes":1425},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\nserver.listen(port, \"0.0.0.0\", () => {\n  log(`serving on port ${port}`);\n});\n})();\n","size_bytes":2018},"server/models.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\n\n// MongoDB Document Interfaces\nexport interface IUser extends Document {\n  _id: string;\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IHotelAdmin extends Document {\n  _id: string;\n  id: string;\n  username: string;\n  password: string;\n  hotelName: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IHotel extends Document {\n  _id: string;\n  id: string;\n  name: string;\n  ownerId: string;\n  address?: string;\n  phone?: string;\n  totalRooms: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IRoomType extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  name: string;\n  category: 'standard' | 'deluxe' | 'suite' | 'studio';\n  type: 'single' | 'double' | 'twin' | 'triple' | 'junior_suite' | 'executive_suite' | 'presidential_suite';\n  amenities: string[];\n  price: number;\n  totalRooms: number;\n  availableRooms: number;\n  roomNumbers: string[]; // Array of room numbers for this room type\n  description?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ICustomer extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  name: string;\n  email?: string;\n  phone: string;\n  roomNumber: string;\n  roomTypeId: string;\n  roomTypeName: string;\n  roomPrice: number;\n  checkinTime: Date;\n  checkoutTime?: Date;\n  expectedStayDays?: number;\n  isActive: boolean;\n  qrCode?: string; // base64 QR code string\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IServiceRequest extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  customerId?: string;\n  guestName?: string;\n  roomNumber: string;\n  service?: string;\n  notes?: string;\n  type: 'maintenance' | 'room_service' | 'food_delivery' | 'housekeeping' | 'concierge' | 'other';\n  description: string;\n  status: 'pending' | 'assigned' | 'in_progress' | 'completed' | 'cancelled';\n  assignedTo?: string;\n  assignedBy?: string;\n  completedBy?: string;\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  requestedAt: Date;\n  assignedAt?: Date;\n  completedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IRoom extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  roomNumber: string;\n  roomTypeId: string;\n  roomTypeName: string;\n  qrCode?: string; // base64 QR code string\n  qrCodeUrl?: string; // URL for QR code scanning\n  isOccupied: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IAdminService extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  serviceRequestId: string;\n  requestType: string;\n  assignedTo: string;\n  timeFrame: string;\n  service: boolean;\n  assignedAt: Date;\n  completedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Mongoose Schemas\nconst userSchema = new Schema<IUser>({\n  id: { type: String, unique: true, required: true },\n  email: { type: String, unique: true, sparse: true },\n  firstName: String,\n  lastName: String,\n  profileImageUrl: String,\n}, { timestamps: true });\n\nconst hotelAdminSchema = new Schema<IHotelAdmin>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  username: { type: String, unique: true, required: true },\n  password: { type: String, required: true },\n  hotelName: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  phone: String,\n  address: String,\n  isActive: { type: Boolean, default: true },\n}, { timestamps: true });\n\nconst hotelSchema = new Schema<IHotel>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  name: { type: String, required: true },\n  ownerId: { type: String, required: true, ref: 'User' },\n  address: String,\n  phone: String,\n  totalRooms: { type: Number, default: 0 },\n}, { timestamps: true });\n\nconst roomTypeSchema = new Schema<IRoomType>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  name: { type: String, required: true },\n  category: {\n    type: String,\n    enum: ['standard', 'deluxe', 'suite', 'studio'],\n    required: true\n  },\n  type: {\n    type: String,\n    enum: ['single', 'double', 'twin', 'triple', 'junior_suite', 'executive_suite', 'presidential_suite'],\n    required: true\n  },\n  amenities: [String],\n  price: { type: Number, required: true, min: 0 },\n  totalRooms: { type: Number, required: true, min: 1 },\n  availableRooms: { type: Number, required: true, min: 0 },\n  roomNumbers: [String], // Array of room numbers for this room type\n  description: String,\n}, { timestamps: true });\n\nconst customerSchema = new Schema<ICustomer>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  name: { type: String, required: true },\n  email: String,\n  phone: { type: String, required: true },\n  roomNumber: { type: String, required: true },\n  roomTypeId: { type: String, required: true, ref: 'RoomType' },\n  roomTypeName: { type: String, required: true },\n  roomPrice: { type: Number, required: true, min: 0 },\n  checkinTime: { type: Date, default: Date.now },\n  checkoutTime: Date,\n  expectedStayDays: Number,\n  isActive: { type: Boolean, default: true },\n  qrCode: String, // base64 QR code string\n}, { timestamps: true });\n\nconst serviceRequestSchema = new Schema<IServiceRequest>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  customerId: { type: String, ref: 'Customer' },\n  roomNumber: { type: String, required: true },\n  type: {\n    type: String,\n    enum: ['maintenance', 'room_service', 'food_delivery', 'housekeeping', 'concierge', 'other'],\n    required: true\n  },\n  description: { type: String, required: true },\n  status: {\n    type: String,\n    enum: ['pending', 'assigned', 'in_progress', 'completed', 'cancelled'],\n    default: 'pending'\n  },\n  assignedTo: String,\n  priority: {\n    type: String,\n    enum: ['low', 'normal', 'high', 'urgent'],\n    default: 'normal'\n  },\n  requestedAt: { type: Date, default: Date.now },\n  assignedAt: Date,\n  completedAt: Date,\n}, { timestamps: true });\n\nconst roomSchema = new Schema<IRoom>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  roomNumber: { type: String, required: true },\n  roomTypeId: { type: String, required: true, ref: 'RoomType' },\n  roomTypeName: { type: String, required: true },\n  qrCode: String, // base64 QR code string\n  qrCodeUrl: String, // URL for QR code scanning\n  isOccupied: { type: Boolean, default: false },\n}, { timestamps: true });\n\n// Create compound index for unique room numbers per hotel\nroomSchema.index({ hotelId: 1, roomNumber: 1 }, { unique: true });\n\n// Mongoose Models\nexport const User = mongoose.models.User || mongoose.model<IUser>('User', userSchema);\nexport const HotelAdmin = mongoose.models.HotelAdmin || mongoose.model<IHotelAdmin>('HotelAdmin', hotelAdminSchema);\nexport const Hotel = mongoose.models.Hotel || mongoose.model<IHotel>('Hotel', hotelSchema);\nexport const RoomType = mongoose.models.RoomType || mongoose.model<IRoomType>('RoomType', roomTypeSchema);\nexport const Room = mongoose.models.Room || mongoose.model<IRoom>('Room', roomSchema);\nexport const Customer = mongoose.models.Customer || mongoose.model<ICustomer>('Customer', customerSchema);\nexport const ServiceRequest = mongoose.models.ServiceRequest || mongoose.model<IServiceRequest>('ServiceRequest', serviceRequestSchema);\n\n// Admin Service Schema\nconst adminServiceSchema = new Schema<IAdminService>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  serviceRequestId: { type: String, required: true, ref: 'ServiceRequest' },\n  requestType: { type: String, required: true },\n  assignedTo: { type: String, required: true },\n  timeFrame: { type: String, required: true },\n  service: { type: Boolean, default: true },\n  assignedAt: { type: Date, default: Date.now },\n  completedAt: Date,\n}, { timestamps: true });\n\nexport const AdminService = mongoose.models.AdminService || mongoose.model<IAdminService>('AdminService', adminServiceSchema);\n\n// Type exports for backend\nexport type UserType = IUser;\nexport type HotelAdminType = IHotelAdmin;\nexport type HotelType = IHotel;\nexport type RoomTypeType = IRoomType;\nexport type RoomType = IRoom;\nexport type CustomerType = ICustomer;\nexport type ServiceRequestType = IServiceRequest;\nexport type AdminServiceType = IAdminService;","size_bytes":8993},"server/multiHotelAuth.ts":{"content":"import session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport MemoryStore from \"memorystore\";\nimport { HotelAdmin } from \"./models\";\nimport { insertHotelAdminSchema } from \"@shared/types\";\nimport mongoose from \"mongoose\";\nimport { z } from \"zod\";\n\n// Enhanced authentication system for multiple hotels\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const memoryStore = MemoryStore(session);\n  const sessionStore = new memoryStore({\n    checkPeriod: sessionTtl,\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.use(getSession());\n\n  // Hotel admin registration endpoint\n  app.post(\"/api/register\", async (req, res) => {\n    try {\n      const adminData = insertHotelAdminSchema.parse(req.body);\n      \n      // Check if username or email already exists\n      const existingAdmin = await HotelAdmin.findOne({\n        $or: [\n          { username: adminData.username },\n          { email: adminData.email }\n        ]\n      });\n      \n      if (existingAdmin) {\n        return res.status(400).json({ \n          message: \"Username or email already exists\" \n        });\n      }\n      \n      // Create new hotel admin\n      const newAdmin = new HotelAdmin({\n        ...adminData,\n        id: new mongoose.Types.ObjectId().toString(),\n      });\n      \n      await newAdmin.save();\n      \n      // Create hotel and setup for the new admin\n      const { storage } = await import(\"./storage\");\n      \n      // Create user record for compatibility\n      await storage.upsertUser({\n        id: newAdmin.id,\n        email: adminData.email,\n        firstName: adminData.hotelName,\n        lastName: \"Admin\"\n      });\n      \n      // Create hotel for the admin\n      const hotel = await storage.createHotel({\n        name: adminData.hotelName,\n        ownerId: newAdmin.id,\n        address: adminData.address || \"\",\n        phone: adminData.phone || \"\",\n        totalRooms: 20\n      });\n      \n      // Set session\n      (req.session as any).user = {\n        id: newAdmin.id,\n        username: newAdmin.username,\n        email: newAdmin.email,\n        hotelName: newAdmin.hotelName,\n        hotelId: hotel.id\n      };\n      \n      res.json({ \n        success: true, \n        user: (req.session as any).user,\n        message: \"Registration successful! Hotel created with default room types.\"\n      });\n      \n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ \n          message: \"Validation error\", \n          errors: error.errors \n        });\n      } else {\n        res.status(500).json({ \n          message: \"Registration failed\", \n          error: error instanceof Error ? error.message : \"Unknown error\"\n        });\n      }\n    }\n  });\n\n  // Login endpoint for hotel admins\n  app.post(\"/api/login\", async (req, res) => {\n    try {\n      const { username, password } = req.body;\n      \n      if (!username || !password) {\n        return res.status(400).json({ message: \"Username and password required\" });\n      }\n      \n      // Find hotel admin by username\n      const admin = await HotelAdmin.findOne({ username, isActive: true });\n      \n      if (!admin || admin.password !== password) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n      \n      const { storage } = await import(\"./storage\");\n      \n      // Ensure user record exists\n      await storage.upsertUser({\n        id: admin.id,\n        email: admin.email,\n        firstName: admin.hotelName,\n        lastName: \"Admin\"\n      });\n      \n      // Get or create hotel\n      let hotel = await storage.getUserHotel(admin.id);\n      if (!hotel) {\n        hotel = await storage.createHotel({\n          name: admin.hotelName,\n          ownerId: admin.id,\n          address: admin.address || \"\",\n          phone: admin.phone || \"\",\n          totalRooms: 20\n        });\n      } else {\n        // Ensure room types exist\n        const roomTypes = await storage.getRoomTypes(hotel.id);\n        if (roomTypes.length === 0) {\n          await storage.createDefaultRoomTypesForHotel(hotel.id);\n        }\n      }\n      \n      // Set session\n      (req.session as any).user = {\n        id: admin.id,\n        username: admin.username,\n        email: admin.email,\n        hotelName: admin.hotelName,\n        hotelId: hotel.id\n      };\n      \n      res.json({ \n        success: true, \n        user: (req.session as any).user \n      });\n      \n    } catch (error) {\n      console.error(\"Login error:\", error);\n      res.status(500).json({ \n        message: \"Login failed\", \n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", (req, res) => {\n    if ((req.session as any).user) {\n      res.json((req.session as any).user);\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Logout endpoint - support both GET and POST\n  const logoutHandler = (req: any, res: any) => {\n    req.session.destroy((err: any) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        res.status(500).json({ message: \"Could not log out\" });\n      } else {\n        res.clearCookie('connect.sid'); // Clear session cookie\n        res.json({ success: true });\n      }\n    });\n  };\n  \n  app.post(\"/api/logout\", logoutHandler);\n  app.get(\"/api/logout\", logoutHandler);\n\n  // Check username availability\n  app.post(\"/api/check-username\", async (req, res) => {\n    try {\n      const { username } = req.body;\n      const existing = await HotelAdmin.findOne({ username });\n      res.json({ available: !existing });\n    } catch (error) {\n      res.status(500).json({ message: \"Error checking username\" });\n    }\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if ((req.session as any).user) {\n    // Add user to request for compatibility\n    (req as any).user = {\n      claims: {\n        sub: (req.session as any).user.id\n      }\n    };\n    next();\n  } else {\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};","size_bytes":6395},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport MemoryStore from \"memorystore\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const memoryStore = MemoryStore(session);\n  const sessionStore = new memoryStore({\n    checkPeriod: sessionTtl, // prune expired entries every 24h\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `${process.env.NODE_ENV === 'development' ? 'http' : 'https'}://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4257},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./multiHotelAuth\";\nimport { insertHotelSchema, insertCustomerSchema, insertServiceRequestSchema, insertRoomTypeSchema, insertRoomSchema, insertAdminServiceSchema } from \"@shared/types\";\nimport { z } from \"zod\";\nimport QRCode from \"qrcode\";\nimport mongoose from \"mongoose\";\n\n// Utility function to validate ObjectId\nfunction isValidObjectId(id: string): boolean {\n  return mongoose.Types.ObjectId.isValid(id) && (new mongoose.Types.ObjectId(id).toString() === id || id.length === 24);\n}\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes - override the auth middleware route with our session-based route\n  app.get('/api/auth/user', (req: any, res) => {\n    if ((req.session as any).user) {\n      res.json((req.session as any).user);\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Hotel routes\n  app.get('/api/hotel', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      res.json(hotel);\n    } catch (error) {\n      console.error(\"Error fetching hotel:\", error);\n      res.status(500).json({ message: \"Failed to fetch hotel\" });\n    }\n  });\n\n  app.post('/api/hotel', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotelData = insertHotelSchema.parse({ ...req.body, ownerId: userId });\n      const hotel = await storage.createHotel(hotelData);\n      res.json(hotel);\n    } catch (error) {\n      console.error(\"Error creating hotel:\", error);\n      res.status(400).json({ message: \"Failed to create hotel\" });\n    }\n  });\n\n  app.put('/api/hotel/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = insertHotelSchema.partial().parse(req.body);\n      const hotel = await storage.updateHotel(id, updateData);\n      res.json(hotel);\n    } catch (error) {\n      console.error(\"Error updating hotel:\", error);\n      res.status(400).json({ message: \"Failed to update hotel\" });\n    }\n  });\n\n  // Hotel setup route for detailed hotel information\n  app.post('/api/hotel/setup', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.id;\n      const hotelAdmin = await storage.getHotelAdminById(userId);\n      \n      if (!hotelAdmin) {\n        return res.status(404).json({ message: \"Hotel admin not found\" });\n      }\n\n      // Update hotel admin with additional details\n      const updatedAdmin = await storage.updateHotelAdmin(userId, {\n        phone: req.body.phone,\n        address: req.body.address,\n      });\n\n      // Get or create hotel for this admin\n      let hotel = await storage.getHotelByAdminId(userId);\n      if (!hotel) {\n        // Create hotel if it doesn't exist\n        const hotelData = {\n          name: req.body.hotelName || hotelAdmin.hotelName,\n          ownerId: userId,\n          address: req.body.address,\n          phone: req.body.phone,\n          totalRooms: parseInt(req.body.totalRooms) || 20,\n          city: req.body.city,\n          state: req.body.state,\n          country: req.body.country,\n          pincode: req.body.pincode,\n          hotelType: req.body.hotelType,\n          description: req.body.description,\n          amenities: req.body.amenities || [],\n          checkInTime: req.body.checkInTime || \"14:00\",\n          checkOutTime: req.body.checkOutTime || \"11:00\",\n          starRating: req.body.starRating,\n          website: req.body.website,\n          email: req.body.email,\n        };\n\n        hotel = await storage.createHotel(hotelData);\n\n        // Create default room types for the new hotel\n        await storage.createDefaultRoomTypes(hotel.id);\n      }\n\n      res.json({ \n        success: true, \n        hotel,\n        message: \"Hotel setup completed successfully!\" \n      });\n    } catch (error) {\n      console.error(\"Error setting up hotel:\", error);\n      res.status(500).json({ message: \"Failed to complete hotel setup\" });\n    }\n  });\n\n  // Room type routes\n  app.get('/api/room-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const roomTypes = await storage.getRoomTypes(hotel.id);\n      res.json(roomTypes);\n    } catch (error) {\n      console.error(\"Error fetching room types:\", error);\n      res.status(500).json({ message: \"Failed to fetch room types\" });\n    }\n  });\n\n  app.post('/api/room-types', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const roomTypeData = insertRoomTypeSchema.parse({ ...req.body, hotelId: hotel.id });\n      const roomType = await storage.createRoomType(roomTypeData);\n      res.json(roomType);\n    } catch (error) {\n      console.error(\"Error creating room type:\", error);\n      res.status(400).json({ message: \"Failed to create room type\" });\n    }\n  });\n\n  app.get('/api/available-rooms', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const availableRooms = await storage.getAvailableRoomNumbers(hotel.id);\n      res.json(availableRooms);\n    } catch (error) {\n      console.error(\"Error fetching available rooms:\", error);\n      res.status(500).json({ message: \"Failed to fetch available rooms\" });\n    }\n  });\n\n  app.post('/api/recalculate-rooms', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      await storage.recalculateRoomAvailability(hotel.id);\n      res.json({ message: \"Room availability recalculated successfully\" });\n    } catch (error) {\n      console.error(\"Error recalculating room availability:\", error);\n      res.status(500).json({ message: \"Failed to recalculate room availability\" });\n    }\n  });\n\n  // Customer routes\n  app.get('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const customers = await storage.getCustomers(hotel.id);\n      res.json(customers);\n    } catch (error) {\n      console.error(\"Error fetching customers:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post('/api/customers', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      // Parse the checkinTime if it's a string\n      const customerInput = { ...req.body };\n      if (customerInput.checkinTime && typeof customerInput.checkinTime === 'string') {\n        customerInput.checkinTime = new Date(customerInput.checkinTime);\n      }\n      \n      // Set default values - use Indian Standard Time (IST = UTC + 5:30)\n      if (!customerInput.checkinTime) {\n        customerInput.checkinTime = new Date(new Date().getTime() + (5.5 * 60 * 60 * 1000));\n      }\n      if (customerInput.isActive === undefined) {\n        customerInput.isActive = true;\n      }\n\n      const customerData = insertCustomerSchema.parse({ \n        ...customerInput, \n        hotelId: hotel.id \n      });\n\n      // Check if room exists in the Room collection\n      const room = await storage.getRoomByNumber(hotel.id, customerData.roomNumber);\n      if (room) {\n        // Update room occupancy status\n        await storage.updateRoom(room.id, { isOccupied: true });\n      }\n      \n      const customer = await storage.createCustomer(customerData);\n      \n      // Broadcast to WebSocket clients\n      broadcastToHotel(hotel.id, {\n        type: 'customer_added',\n        data: customer\n      });\n\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error creating customer:\", error);\n      res.status(400).json({ \n        message: \"Failed to create customer\", \n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.put('/api/customers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Parse dates if they're strings\n      const customerInput = { ...req.body };\n      if (customerInput.checkinTime && typeof customerInput.checkinTime === 'string') {\n        customerInput.checkinTime = new Date(customerInput.checkinTime);\n      }\n      if (customerInput.checkoutTime && typeof customerInput.checkoutTime === 'string') {\n        customerInput.checkoutTime = new Date(customerInput.checkoutTime);\n      }\n      \n      const updateData = insertCustomerSchema.partial().parse(customerInput);\n      const customer = await storage.updateCustomer(id, updateData);\n      res.json(customer);\n    } catch (error) {\n      console.error(\"Error updating customer:\", error);\n      res.status(400).json({ \n        message: \"Failed to update customer\",\n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.delete('/api/customers/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteCustomer(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting customer:\", error);\n      res.status(400).json({ message: \"Failed to delete customer\" });\n    }\n  });\n\n  // Service request routes\n  app.get('/api/service-requests', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const serviceRequests = await storage.getServiceRequests(hotel.id);\n      res.json(serviceRequests);\n    } catch (error) {\n      console.error(\"Error fetching service requests:\", error);\n      res.status(500).json({ message: \"Failed to fetch service requests\" });\n    }\n  });\n\n  app.post('/api/service-requests', async (req, res) => {\n    try {\n      const requestData = insertServiceRequestSchema.parse(req.body);\n      const serviceRequest = await storage.createServiceRequest(requestData);\n      \n      // Broadcast to WebSocket clients\n      broadcastToHotel(requestData.hotelId, {\n        type: 'service_request_created',\n        data: serviceRequest\n      });\n\n      res.json(serviceRequest);\n    } catch (error) {\n      console.error(\"Error creating service request:\", error);\n      res.status(400).json({ message: \"Failed to create service request\" });\n    }\n  });\n\n  app.put('/api/service-requests/:id', async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Validate ID format for security\n      if (!isValidObjectId(id)) {\n        return res.status(400).json({ message: \"Invalid ID format\" });\n      }\n      \n      const updateData = insertServiceRequestSchema.partial().omit({ assignedAt: true, completedAt: true }).parse(req.body);\n      const serviceRequest = await storage.updateServiceRequest(id, updateData);\n      \n      // Broadcast update to WebSocket clients\n      const request = await storage.getServiceRequest(id);\n      if (request) {\n        broadcastToHotel(request.hotelId, {\n          type: 'service_request_updated',\n          data: serviceRequest\n        });\n      }\n\n      res.json(serviceRequest);\n    } catch (error) {\n      console.error(\"Error updating service request:\", error);\n      res.status(400).json({ message: \"Failed to update service request\" });\n    }\n  });\n\n  // Admin Service routes\n  app.get('/api/admin-services', async (req, res) => {\n    try {\n      const { hotelId } = req.query;\n      if (!hotelId) {\n        return res.status(400).json({ message: \"Hotel ID is required\" });\n      }\n      const adminServices = await storage.getAdminServices(hotelId as string);\n      res.json(adminServices);\n    } catch (error) {\n      console.error(\"Error fetching admin services:\", error);\n      res.status(500).json({ message: \"Failed to fetch admin services\" });\n    }\n  });\n\n  app.post('/api/admin-services', async (req, res) => {\n    try {\n      const serviceData = insertAdminServiceSchema.parse(req.body);\n      const adminService = await storage.createAdminService(serviceData);\n      res.json(adminService);\n    } catch (error) {\n      console.error(\"Error creating admin service:\", error);\n      res.status(400).json({ message: \"Failed to create admin service\" });\n    }\n  });\n\n  app.put('/api/admin-services/:serviceRequestId', async (req, res) => {\n    try {\n      const { serviceRequestId } = req.params;\n      \n      // Validate ID format for security\n      if (!isValidObjectId(serviceRequestId)) {\n        return res.status(400).json({ message: \"Invalid ID format\" });\n      }\n      const updateData = insertAdminServiceSchema.partial().parse(req.body);\n      const adminService = await storage.updateAdminService(serviceRequestId, updateData);\n      res.json(adminService);\n    } catch (error) {\n      console.error(\"Error updating admin service:\", error);\n      res.status(400).json({ message: \"Failed to update admin service\" });\n    }\n  });\n\n  // Room management routes\n  app.get('/api/rooms', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const rooms = await storage.getRooms(hotel.id);\n      res.json(rooms);\n    } catch (error) {\n      console.error(\"Error fetching rooms:\", error);\n      res.status(500).json({ message: \"Failed to fetch rooms\" });\n    }\n  });\n\n  app.post('/api/generate-room-qr', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const { roomNumber, roomTypeId, roomTypeName } = req.body;\n      \n      if (!roomNumber || !roomTypeId || !roomTypeName) {\n        return res.status(400).json({ message: \"Room number, type ID, and type name are required\" });\n      }\n\n      // Check if room already exists\n      const existingRoom = await storage.getRoomByNumber(hotel.id, roomNumber);\n      if (existingRoom) {\n        return res.status(400).json({ message: \"Room already exists with QR code\" });\n      }\n\n      // Generate QR code URL for room service - pointing to your service app\n      const serviceAppUrl = process.env.SERVICE_APP_URL || 'https://your-service-app.replit.app';\n      const qrCodeUrl = `${serviceAppUrl}/service?room=${roomNumber}&hotel=${hotel.id}`;\n      const qrCodeBase64 = await QRCode.toDataURL(qrCodeUrl, {\n        errorCorrectionLevel: 'M',\n        margin: 1,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n\n      // Create room with QR code\n      const roomData = insertRoomSchema.parse({\n        hotelId: hotel.id,\n        roomNumber,\n        roomTypeId,\n        roomTypeName,\n        qrCode: qrCodeBase64,\n        qrCodeUrl,\n        isOccupied: false\n      });\n\n      const room = await storage.createRoom(roomData);\n      res.json(room);\n    } catch (error) {\n      console.error(\"Error generating room QR code:\", error);\n      res.status(400).json({ \n        message: \"Failed to generate room QR code\", \n        error: error instanceof Error ? error.message : \"Unknown error\"\n      });\n    }\n  });\n\n  app.get('/api/qr-codes/:hotelId', async (req, res) => {\n    try {\n      const { hotelId } = req.params;\n      const roomQRCodes = await storage.getRoomQRCodes(hotelId);\n      res.json(roomQRCodes);\n    } catch (error) {\n      console.error(\"Error fetching room QR codes:\", error);\n      res.status(500).json({ message: \"Failed to fetch room QR codes\" });\n    }\n  });\n\n  app.post('/api/regenerate-all-qr-codes', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      // Get all existing rooms\n      const rooms = await storage.getRooms(hotel.id);\n      \n      if (rooms.length === 0) {\n        return res.json({ \n          success: true, \n          message: \"No rooms found - QR codes are generated when you create room QR codes\",\n          updatedCount: 0 \n        });\n      }\n\n      const serviceAppUrl = process.env.SERVICE_APP_URL || 'https://your-service-app.replit.app';\n      let updatedCount = 0;\n\n      // Update each room's QR code\n      for (const room of rooms) {\n        const qrCodeUrl = `${serviceAppUrl}/service?room=${room.roomNumber}&hotel=${hotel.id}`;\n        const qrCodeBase64 = await QRCode.toDataURL(qrCodeUrl, {\n          errorCorrectionLevel: 'M',\n          margin: 1,\n          color: {\n            dark: '#000000',\n            light: '#FFFFFF'\n          }\n        });\n\n        await storage.updateRoom(room.id, {\n          qrCode: qrCodeBase64,\n          qrCodeUrl: qrCodeUrl\n        });\n        updatedCount++;\n      }\n\n      res.json({ \n        success: true, \n        message: `Successfully regenerated QR codes for ${updatedCount} rooms`,\n        updatedCount \n      });\n    } catch (error) {\n      console.error(\"Error regenerating QR codes:\", error);\n      res.status(500).json({ message: \"Failed to regenerate QR codes\" });\n    }\n  });\n\n  // Analytics routes\n  app.get('/api/analytics/stats', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const stats = await storage.getHotelStats(hotel.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch stats\" });\n    }\n  });\n\n  app.get('/api/analytics/rooms', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const roomAnalytics = await storage.getRoomAnalytics(hotel.id);\n      res.json(roomAnalytics);\n    } catch (error) {\n      console.error(\"Error fetching room analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch room analytics\" });\n    }\n  });\n\n  app.get('/api/analytics/services', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const hotel = await storage.getUserHotel(userId);\n      \n      if (!hotel) {\n        return res.status(404).json({ message: \"Hotel not found\" });\n      }\n\n      const serviceAnalytics = await storage.getServiceRequestAnalytics(hotel.id);\n      res.json(serviceAnalytics);\n    } catch (error) {\n      console.error(\"Error fetching service analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch service analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  // WebSocket setup\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const hotelConnections = new Map<string, Set<WebSocket>>();\n\n  wss.on('connection', (ws, req) => {\n    let hotelId: string | null = null;\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'join_hotel' && data.hotelId && typeof data.hotelId === 'string') {\n          hotelId = data.hotelId;\n          \n          if (!hotelConnections.has(data.hotelId)) {\n            hotelConnections.set(data.hotelId, new Set());\n          }\n          \n          const connections = hotelConnections.get(data.hotelId);\n          if (connections) {\n            connections.add(ws);\n          }\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      if (hotelId && hotelConnections.has(hotelId)) {\n        const connections = hotelConnections.get(hotelId);\n        if (connections) {\n          connections.delete(ws);\n          \n          if (connections.size === 0) {\n            hotelConnections.delete(hotelId);\n          }\n        }\n      }\n    });\n  });\n\n  function broadcastToHotel(hotelId: string, message: any) {\n    const connections = hotelConnections.get(hotelId);\n    if (connections) {\n      const messageStr = JSON.stringify(message);\n      connections.forEach(ws => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(messageStr);\n        }\n      });\n    }\n  }\n\n  return httpServer;\n}\n","size_bytes":21770},"server/simpleAuth.ts":{"content":"import session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport MemoryStore from \"memorystore\";\n\n// Simple admin credentials\nconst ADMIN_USERNAME = \"admin\";\nconst ADMIN_PASSWORD = \"password\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const memoryStore = MemoryStore(session);\n  const sessionStore = new memoryStore({\n    checkPeriod: sessionTtl,\n  });\n  return session({\n    secret: process.env.SESSION_SECRET || 'dev-secret-key-change-in-production',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: false,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.use(getSession());\n\n  // Login endpoint\n  app.post(\"/api/login\", async (req, res) => {\n    const { username, password } = req.body;\n    \n    if (username === ADMIN_USERNAME && password === ADMIN_PASSWORD) {\n      const { storage } = await import(\"./storage\");\n      \n      // Create admin user if doesn't exist\n      await storage.upsertUser({\n        id: \"admin\",\n        email: \"admin@hotel.com\",\n        firstName: \"Admin\",\n        lastName: \"User\"\n      });\n      \n      // Create default hotel if doesn't exist\n      let hotel = await storage.getUserHotel(\"admin\");\n      if (!hotel) {\n        hotel = await storage.createHotel({\n          name: \"Demo Hotel\",\n          ownerId: \"admin\",\n          address: \"123 Main Street, City, State\",\n          phone: \"+1-555-0123\",\n          totalRooms: 20\n        });\n      } else {\n        // Ensure room types exist for existing hotel\n        const roomTypes = await storage.getRoomTypes(hotel.id);\n        if (roomTypes.length === 0) {\n          await storage.createDefaultRoomTypesForHotel(hotel.id);\n        } else {\n          // Check if room types have roomNumbers - if not, recreate them\n          const firstRoomType = roomTypes[0];\n          if (!firstRoomType.roomNumbers || firstRoomType.roomNumbers.length === 0) {\n            // Delete existing room types and recreate with room numbers\n            console.log(\"Recreating room types with room numbers...\");\n            for (const roomType of roomTypes) {\n              await storage.deleteRoomType(roomType.id);\n            }\n            await storage.createDefaultRoomTypesForHotel(hotel.id);\n          }\n        }\n        \n        // Update hotel total rooms to match actual room types (4 types × 5 rooms = 20)\n        if (hotel.totalRooms !== 20) {\n          await storage.updateHotel(hotel.id, { totalRooms: 20 });\n        }\n      }\n      \n      (req.session as any).user = {\n        id: \"admin\",\n        username: \"admin\",\n        email: \"admin@hotel.com\",\n        firstName: \"Admin\",\n        lastName: \"User\"\n      };\n      res.json({ success: true, user: (req.session as any).user });\n    } else {\n      res.status(401).json({ message: \"Invalid credentials\" });\n    }\n  });\n\n  // Get current user\n  app.get(\"/api/auth/user\", (req, res) => {\n    if ((req.session as any).user) {\n      res.json((req.session as any).user);\n    } else {\n      res.status(401).json({ message: \"Not authenticated\" });\n    }\n  });\n\n  // Logout endpoint\n  app.post(\"/api/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        res.status(500).json({ message: \"Could not log out\" });\n      } else {\n        res.json({ success: true });\n      }\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if ((req.session as any).user) {\n    // Add user to request for compatibility\n    (req as any).user = {\n      claims: {\n        sub: (req.session as any).user.id\n      }\n    };\n    next();\n  } else {\n    res.status(401).json({ message: \"Unauthorized\" });\n  }\n};","size_bytes":3780},"server/storage.ts":{"content":"import {\n  User,\n  HotelAdmin,\n  Hotel,\n  RoomType,\n  Customer,\n  ServiceRequest,\n  AdminService,\n  type UserType,\n  type HotelAdminType,\n  type HotelType,\n  type RoomTypeType,\n  type CustomerType,\n  type ServiceRequestType,\n  type AdminServiceType,\n} from \"../shared/schema\";\nimport { Room, type RoomType as RoomModelType } from \"./models\";\nimport {\n  type UpsertUser,\n  type InsertHotel,\n  type InsertHotelAdmin,\n  type InsertRoom,\n  type InsertCustomer,\n  type InsertServiceRequest,\n  type InsertAdminService,\n  insertRoomTypeSchema,\n} from \"@shared/types\";\n// MongoDB connection is handled separately in serverless environment\nimport mongoose from \"mongoose\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations (IMPORTANT: mandatory for Replit Auth)\n  getUser(id: string): Promise<UserType | undefined>;\n  upsertUser(user: UpsertUser): Promise<UserType>;\n  \n  // Hotel admin operations\n  getHotelAdmin(id: string): Promise<HotelAdminType | undefined>;\n  getHotelAdminById(id: string): Promise<HotelAdminType | undefined>;\n  createHotelAdmin(admin: InsertHotelAdmin): Promise<HotelAdminType>;\n  updateHotelAdmin(id: string, data: Partial<InsertHotelAdmin>): Promise<HotelAdminType>;\n  \n  // Hotel operations\n  getUserHotel(userId: string): Promise<HotelType | undefined>;\n  getHotelByAdminId(adminId: string): Promise<HotelType | undefined>;\n  createHotel(hotel: InsertHotel): Promise<HotelType>;\n  updateHotel(id: string, data: Partial<InsertHotel>): Promise<HotelType>;\n  \n  // Room type operations\n  getRoomTypes(hotelId: string): Promise<RoomTypeType[]>;\n  getRoomType(id: string): Promise<RoomTypeType | undefined>;\n  createRoomType(roomType: any): Promise<RoomTypeType>;\n  updateRoomType(id: string, data: any): Promise<RoomTypeType>;\n  deleteRoomType(id: string): Promise<void>;\n  updateRoomAvailability(roomTypeId: string, change: number): Promise<void>;\n  createDefaultRoomTypesForHotel(hotelId: string): Promise<void>;\n  createDefaultRoomTypes(hotelId: string): Promise<void>;\n  getAvailableRoomNumbers(hotelId: string): Promise<{ [roomTypeId: string]: string[] }>;\n  \n  // Room operations\n  getRooms(hotelId: string): Promise<RoomModelType[]>;\n  getRoom(id: string): Promise<RoomModelType | undefined>;\n  getRoomByNumber(hotelId: string, roomNumber: string): Promise<RoomModelType | undefined>;\n  createRoom(room: InsertRoom): Promise<RoomModelType>;\n  updateRoom(id: string, data: Partial<InsertRoom>): Promise<RoomModelType>;\n  deleteRoom(id: string): Promise<void>;\n  getRoomQRCodes(hotelId: string): Promise<Array<{ roomNumber: string; roomType: string; qrCode: string; qrCodeUrl: string }>>;\n  \n  // Customer operations\n  getCustomers(hotelId: string): Promise<CustomerType[]>;\n  getCustomer(id: string): Promise<CustomerType | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<CustomerType>;\n  updateCustomer(id: string, data: Partial<InsertCustomer>): Promise<CustomerType>;\n  deleteCustomer(id: string): Promise<void>;\n  \n  // Service request operations\n  getServiceRequests(hotelId: string): Promise<ServiceRequestType[]>;\n  getServiceRequest(id: string): Promise<ServiceRequestType | undefined>;\n  createServiceRequest(request: InsertServiceRequest): Promise<ServiceRequestType>;\n  updateServiceRequest(id: string, data: Partial<InsertServiceRequest>): Promise<ServiceRequestType>;\n  \n  // Admin service operations\n  getAdminServices(hotelId: string): Promise<AdminServiceType[]>;\n  createAdminService(serviceData: InsertAdminService): Promise<AdminServiceType>;\n  updateAdminService(serviceRequestId: string, data: Partial<InsertAdminService>): Promise<AdminServiceType>;\n  \n  // Analytics operations\n  getRoomAnalytics(hotelId: string): Promise<{\n    mostBookedRoomTypes: Array<{ roomType: string; bookings: number; revenue: number }>;\n    occupancyByRoomType: Array<{ roomType: string; occupancyRate: number; totalRooms: number; occupiedRooms: number }>;\n    revenueByRoomType: Array<{ roomType: string; revenue: number; averagePrice: number }>;\n  }>;\n  getServiceRequestAnalytics(hotelId: string): Promise<{\n    completionTimeframes: Array<{ assignedTo: string; avgCompletionHours: number; completedRequests: number }>;\n    popularServices: Array<{ serviceType: string; count: number; completionRate: number }>;\n    serviceStatusBreakdown: Array<{ status: string; count: number; percentage: number }>;\n    staffPerformance: Array<{ staffMember: string; assignedRequests: number; completedRequests: number; avgTimeFrame: string }>;\n  }>;\n  \n  // Analytics\n  getHotelStats(hotelId: string): Promise<{\n    totalCustomers: number;\n    activeCustomers: number;\n    pendingRequests: number;\n    occupancyRate: number;\n    totalRevenue: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations (IMPORTANT: mandatory for Replit Auth)\n  async getUser(id: string): Promise<UserType | undefined> {\n    const user = await User.findOne({ id }).lean() as UserType | null;\n    return user || undefined;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<UserType> {\n    const user = await User.findOneAndUpdate(\n      { id: userData.id },\n      { ...userData, updatedAt: new Date() },\n      { new: true, upsert: true, lean: true }\n    ) as UserType | null;\n    if (!user) {\n      throw new Error('Failed to create/update user');\n    }\n    return user;\n  }\n\n  // Hotel admin operations\n  async getHotelAdmin(id: string): Promise<HotelAdminType | undefined> {\n    const admin = await HotelAdmin.findOne({ id }).lean() as HotelAdminType | null;\n    return admin || undefined;\n  }\n\n  async getHotelAdminById(id: string): Promise<HotelAdminType | undefined> {\n    const admin = await HotelAdmin.findOne({ id }).lean() as HotelAdminType | null;\n    return admin || undefined;\n  }\n\n  async createHotelAdmin(adminData: InsertHotelAdmin): Promise<HotelAdminType> {\n    const admin = new HotelAdmin({\n      ...adminData,\n      id: new mongoose.Types.ObjectId().toString(),\n    });\n    await admin.save();\n    return admin.toObject() as HotelAdminType;\n  }\n\n  async updateHotelAdmin(id: string, data: Partial<InsertHotelAdmin>): Promise<HotelAdminType> {\n    const admin = await HotelAdmin.findOneAndUpdate(\n      { id },\n      { $set: data },\n      { new: true }\n    ).lean() as any;\n    \n    if (!admin) {\n      throw new Error(\"Hotel admin not found\");\n    }\n    \n    return admin as HotelAdminType;\n  }\n\n  // Hotel operations\n  async getUserHotel(userId: string): Promise<HotelType | undefined> {\n    const hotel = await Hotel.findOne({ ownerId: userId }).lean() as HotelType | null;\n    return hotel || undefined;\n  }\n\n  async getHotelByAdminId(adminId: string): Promise<HotelType | undefined> {\n    const hotel = await Hotel.findOne({ ownerId: adminId }).lean() as HotelType | null;\n    return hotel || undefined;\n  }\n\n  async createHotel(hotelData: InsertHotel): Promise<HotelType> {\n    const hotel = new Hotel({\n      ...hotelData,\n      id: new mongoose.Types.ObjectId().toString(),\n    });\n    await hotel.save();\n    \n    // Create default room types for the hotel\n    await this.createDefaultRoomTypes(hotel.id);\n    \n    return hotel.toObject() as HotelType;\n  }\n\n  async createDefaultRoomTypesForHotel(hotelId: string): Promise<void> {\n    return this.createDefaultRoomTypes(hotelId);\n  }\n\n  async createDefaultRoomTypes(hotelId: string): Promise<void> {\n    const defaultRoomTypes = [\n      {\n        hotelId,\n        name: \"Standard Room\",\n        category: \"standard\" as const,\n        type: \"single\" as const,\n        amenities: [\"Bed\", \"TV\", \"Wi-Fi\", \"Bathroom\"],\n        price: 2500,\n        totalRooms: 5,\n        availableRooms: 5,\n        roomNumbers: [\"1\", \"2\", \"3\", \"4\", \"5\"], // Rooms 1-5\n        description: \"Basic amenities (bed, TV, Wi-Fi, bathroom). Perfect for solo travelers or couples.\"\n      },\n      {\n        hotelId,\n        name: \"Deluxe Room\",\n        category: \"deluxe\" as const,\n        type: \"double\" as const,\n        amenities: [\"Large Bed\", \"TV\", \"Wi-Fi\", \"Minibar\", \"Better View\", \"Bathroom\"],\n        price: 3500,\n        totalRooms: 5,\n        availableRooms: 5,\n        roomNumbers: [\"6\", \"7\", \"8\", \"9\", \"10\"], // Rooms 6-10\n        description: \"More spacious than Standard. Includes extras like minibar, better view, larger bed.\"\n      },\n      {\n        hotelId,\n        name: \"Suite\",\n        category: \"suite\" as const,\n        type: \"junior_suite\" as const,\n        amenities: [\"Separate Living Area\", \"Bedroom\", \"Sofa\", \"Work Desk\", \"Luxury Bathroom\", \"Premium Amenities\"],\n        price: 5500,\n        totalRooms: 5,\n        availableRooms: 5,\n        roomNumbers: [\"11\", \"12\", \"13\", \"14\", \"15\"], // Rooms 11-15\n        description: \"Separate living area + bedroom. Premium amenities (sofa, work desk, luxury bathroom).\"\n      },\n      {\n        hotelId,\n        name: \"Family Room\",\n        category: \"standard\" as const,\n        type: \"triple\" as const,\n        amenities: [\"Multiple Beds\", \"Family Space\", \"TV\", \"Wi-Fi\", \"Large Bathroom\"],\n        price: 4500,\n        totalRooms: 5,\n        availableRooms: 5,\n        roomNumbers: [\"16\", \"17\", \"18\", \"19\", \"20\"], // Rooms 16-20\n        description: \"Designed for families. Multiple beds or a combination (e.g., 1 double + 2 singles).\"\n      }\n    ];\n\n    for (const roomType of defaultRoomTypes) {\n      await this.createRoomType(roomType);\n    }\n  }\n\n  // Room type operations\n  async getRoomTypes(hotelId: string): Promise<RoomTypeType[]> {\n    return await RoomType.find({ hotelId })\n      .sort({ category: 1, price: 1 })\n      .lean() as any;\n  }\n\n  async getRoomType(id: string): Promise<RoomTypeType | undefined> {\n    const roomType = await RoomType.findOne({ id }).lean() as RoomTypeType | null;\n    return roomType || undefined;\n  }\n\n  async createRoomType(roomTypeData: any): Promise<RoomTypeType> {\n    const roomType = new RoomType({\n      ...roomTypeData,\n      id: new mongoose.Types.ObjectId().toString(),\n      availableRooms: roomTypeData.totalRooms // Initialize available rooms to total rooms\n    });\n    await roomType.save();\n    return roomType.toObject() as RoomTypeType;\n  }\n\n  async updateRoomType(id: string, data: any): Promise<RoomTypeType> {\n    const roomType = await RoomType.findOneAndUpdate(\n      { id },\n      { ...data, updatedAt: new Date() },\n      { new: true, lean: true }\n    ) as RoomTypeType | null;\n    if (!roomType) {\n      throw new Error('Room type not found');\n    }\n    return roomType;\n  }\n\n  async deleteRoomType(id: string): Promise<void> {\n    await RoomType.deleteOne({ id });\n  }\n\n  async updateRoomAvailability(roomTypeId: string, change: number): Promise<void> {\n    await RoomType.findOneAndUpdate(\n      { id: roomTypeId },\n      { $inc: { availableRooms: change } }\n    );\n  }\n\n  async recalculateRoomAvailability(hotelId: string): Promise<void> {\n    // Get all room types for this hotel\n    const roomTypes = await RoomType.find({ hotelId }).lean();\n    \n    // Get all active customers for this hotel\n    const activeCustomers = await Customer.find({ hotelId, isActive: true }).lean();\n    \n    // Count occupied rooms by room type\n    const occupiedByRoomType: { [roomTypeId: string]: number } = {};\n    activeCustomers.forEach(customer => {\n      const roomTypeId = customer.roomTypeId;\n      occupiedByRoomType[roomTypeId] = (occupiedByRoomType[roomTypeId] || 0) + 1;\n    });\n    \n    // Update each room type's available rooms\n    for (const roomType of roomTypes) {\n      const occupiedCount = occupiedByRoomType[roomType.id] || 0;\n      const correctAvailableRooms = roomType.totalRooms - occupiedCount;\n      \n      // Update the room type with correct availability\n      await RoomType.findOneAndUpdate(\n        { id: roomType.id },\n        { $set: { availableRooms: correctAvailableRooms } }\n      );\n    }\n  }\n\n  async getAvailableRoomNumbers(hotelId: string): Promise<{ [roomTypeId: string]: string[] }> {\n    const roomTypes = await this.getRoomTypes(hotelId);\n    const occupiedCustomers = await Customer.find({ hotelId, isActive: true }).lean();\n    const occupiedRoomNumbers = new Set(occupiedCustomers.map(c => c.roomNumber));\n    \n    const availableRoomsByType: { [roomTypeId: string]: string[] } = {};\n    \n    for (const roomType of roomTypes) {\n      const availableRooms = (roomType.roomNumbers || []).filter(\n        roomNumber => !occupiedRoomNumbers.has(roomNumber)\n      );\n      availableRoomsByType[roomType.id] = availableRooms;\n    }\n    \n    return availableRoomsByType;\n  }\n\n  // Room operations\n  async getRooms(hotelId: string): Promise<RoomModelType[]> {\n    return await Room.find({ hotelId })\n      .sort({ roomNumber: 1 })\n      .lean() as any;\n  }\n\n  async getRoom(id: string): Promise<RoomModelType | undefined> {\n    const room = await Room.findOne({ id }).lean() as RoomModelType | null;\n    return room || undefined;\n  }\n\n  async getRoomByNumber(hotelId: string, roomNumber: string): Promise<RoomModelType | undefined> {\n    const room = await Room.findOne({ hotelId, roomNumber }).lean() as RoomModelType | null;\n    return room || undefined;\n  }\n\n  async createRoom(roomData: InsertRoom): Promise<RoomModelType> {\n    const room = new Room({\n      ...roomData,\n      id: new mongoose.Types.ObjectId().toString(),\n    });\n    await room.save();\n    return room.toObject() as RoomModelType;\n  }\n\n  async updateRoom(id: string, data: Partial<InsertRoom>): Promise<RoomModelType> {\n    const room = await Room.findOneAndUpdate(\n      { id },\n      { ...data, updatedAt: new Date() },\n      { new: true, lean: true }\n    ) as RoomModelType | null;\n    if (!room) {\n      throw new Error('Room not found');\n    }\n    return room;\n  }\n\n  async deleteRoom(id: string): Promise<void> {\n    await Room.deleteOne({ id });\n  }\n\n  async getRoomQRCodes(hotelId: string): Promise<Array<{ roomNumber: string; roomType: string; qrCode: string; qrCodeUrl: string }>> {\n    const rooms = await Room.find({ \n      hotelId,\n      qrCode: { $exists: true, $ne: null }\n    }).lean();\n    \n    return rooms.map(room => ({\n      roomNumber: room.roomNumber,\n      roomType: room.roomTypeName,\n      qrCode: room.qrCode || '',\n      qrCodeUrl: room.qrCodeUrl || ''\n    }));\n  }\n\n  async updateHotel(id: string, data: Partial<InsertHotel>): Promise<HotelType> {\n    const hotel = await Hotel.findOneAndUpdate(\n      { id },\n      { ...data, updatedAt: new Date() },\n      { new: true, lean: true }\n    ) as HotelType | null;\n    if (!hotel) {\n      throw new Error('Hotel not found');\n    }\n    return hotel;\n  }\n\n  // Customer operations\n  async getCustomers(hotelId: string): Promise<CustomerType[]> {\n    return await Customer.find({ hotelId })\n      .sort({ createdAt: -1 })\n      .lean() as any;\n  }\n\n  async getCustomer(id: string): Promise<CustomerType | undefined> {\n    const customer = await Customer.findOne({ id }).lean() as CustomerType | null;\n    return customer || undefined;\n  }\n\n  async createCustomer(customerData: InsertCustomer): Promise<CustomerType> {\n    const customer = new Customer({\n      ...customerData,\n      id: new mongoose.Types.ObjectId().toString(),\n    });\n    await customer.save();\n    \n    // Decrease room availability\n    await this.updateRoomAvailability(customerData.roomTypeId, -1);\n    \n    return customer.toObject() as CustomerType;\n  }\n\n  async updateCustomer(id: string, data: Partial<InsertCustomer>): Promise<CustomerType> {\n    // Get the current customer state before updating\n    const currentCustomer = await Customer.findOne({ id }).lean() as CustomerType | null;\n    if (!currentCustomer) {\n      throw new Error('Customer not found');\n    }\n    \n    const customer = await Customer.findOneAndUpdate(\n      { id },\n      { ...data, updatedAt: new Date() },\n      { new: true, lean: true }\n    ) as CustomerType | null;\n    if (!customer) {\n      throw new Error('Customer not found');\n    }\n    \n    // If customer is being checked out (isActive changed from true to false)\n    if (currentCustomer.isActive === true && data.isActive === false) {\n      // Free up the room by increasing availability\n      await this.updateRoomAvailability(currentCustomer.roomTypeId, +1);\n    }\n    // If customer is being checked back in (isActive changed from false to true)\n    else if (currentCustomer.isActive === false && data.isActive === true) {\n      // Occupy the room by decreasing availability\n      await this.updateRoomAvailability(currentCustomer.roomTypeId, -1);\n    }\n    \n    return customer;\n  }\n\n  async deleteCustomer(id: string): Promise<void> {\n    // Get customer before deleting to free up their room\n    const customer = await Customer.findOne({ id }).lean() as CustomerType | null;\n    if (customer && customer.isActive) {\n      // Free up the room if customer was active\n      await this.updateRoomAvailability(customer.roomTypeId, +1);\n    }\n    \n    await Customer.deleteOne({ id });\n  }\n\n  // Service request operations\n  async getServiceRequests(hotelId: string): Promise<ServiceRequestType[]> {\n    const requests = await ServiceRequest.find({ hotelId })\n      .sort({ requestedAt: -1 })\n      .lean() as any[];\n    \n    // Ensure each request has a valid ObjectId - use _id if id is invalid\n    return requests.map(request => {\n      const validId = (request.id && mongoose.Types.ObjectId.isValid(request.id)) \n        ? request.id \n        : request._id.toString();\n      return {\n        ...request,\n        id: validId\n      };\n    }) as ServiceRequestType[];\n  }\n\n  async getServiceRequest(id: string): Promise<ServiceRequestType | undefined> {\n    const request = await ServiceRequest.findOne({ \n      $or: [{ id }, { _id: id }] \n    }).lean() as ServiceRequestType | null;\n    \n    if (!request) return undefined;\n    \n    // Ensure the request has a valid ObjectId - use _id if id is invalid\n    const validId = (request.id && mongoose.Types.ObjectId.isValid(request.id)) \n      ? request.id \n      : request._id.toString();\n    return {\n      ...request,\n      id: validId\n    } as ServiceRequestType;\n  }\n\n  async createServiceRequest(requestData: InsertServiceRequest): Promise<ServiceRequestType> {\n    const request = new ServiceRequest({\n      ...requestData,\n      id: new mongoose.Types.ObjectId().toString(),\n    });\n    await request.save();\n    return request.toObject() as ServiceRequestType;\n  }\n\n  async updateServiceRequest(id: string, data: Partial<InsertServiceRequest>): Promise<ServiceRequestType> {\n    const updateFields: any = { ...data, updatedAt: new Date() };\n    \n    // Add timestamps when status changes\n    if (data.status === 'assigned' && data.assignedTo) {\n      updateFields.assignedAt = new Date();\n    }\n    if (data.status === 'completed') {\n      updateFields.completedAt = new Date();\n    }\n    \n    const request = await ServiceRequest.findOneAndUpdate(\n      { $or: [{ id }, { _id: id }] },\n      updateFields,\n      { new: true, lean: true }\n    ) as ServiceRequestType | null;\n    if (!request) {\n      throw new Error('Service request not found');\n    }\n    \n    // Ensure the returned request has a valid ObjectId - use _id if id is invalid\n    const validId = (request.id && mongoose.Types.ObjectId.isValid(request.id)) \n      ? request.id \n      : request._id.toString();\n    return {\n      ...request,\n      id: validId\n    } as ServiceRequestType;\n  }\n\n  // Admin service operations\n  async getAdminServices(hotelId: string): Promise<AdminServiceType[]> {\n    const adminServices = await AdminService.find({ hotelId })\n      .sort({ assignedAt: -1 })\n      .lean() as any[];\n    \n    // Ensure each admin service has an id field\n    return adminServices.map(service => ({\n      ...service,\n      id: service.id || service._id.toString()\n    })) as AdminServiceType[];\n  }\n\n  async createAdminService(serviceData: InsertAdminService): Promise<AdminServiceType> {\n    const adminService = new AdminService({\n      ...serviceData,\n      id: new mongoose.Types.ObjectId().toString(),\n    });\n    await adminService.save();\n    return adminService.toObject() as AdminServiceType;\n  }\n\n  async updateAdminService(serviceRequestId: string, data: Partial<InsertAdminService>): Promise<AdminServiceType> {\n    // Find the most recent admin service for this service request\n    const adminService = await AdminService.findOneAndUpdate(\n      { serviceRequestId },\n      { ...data, updatedAt: new Date() },\n      { new: true, lean: true, sort: { assignedAt: -1 } }\n    ) as AdminServiceType | null;\n    \n    if (!adminService) {\n      throw new Error('Admin service not found');\n    }\n    \n    // Ensure the returned admin service has an id field\n    return {\n      ...adminService,\n      id: adminService.id || adminService._id.toString()\n    } as AdminServiceType;\n  }\n\n  // Analytics\n  async getHotelStats(hotelId: string): Promise<{\n    totalCustomers: number;\n    activeCustomers: number;\n    pendingRequests: number;\n    occupancyRate: number;\n    totalRevenue: number;\n  }> {\n    const totalCustomers = await Customer.countDocuments({ hotelId });\n    const activeCustomers = await Customer.countDocuments({ hotelId, isActive: true });\n    const pendingRequests = await ServiceRequest.countDocuments({ hotelId, status: 'pending' });\n    \n    // Calculate total revenue from all customers\n    const customers = await Customer.find({ hotelId }).lean();\n    const totalRevenue = customers.reduce((sum, customer) => sum + (customer.roomPrice || 0), 0);\n    \n    // Calculate occupancy rate based on room types\n    const roomTypes = await RoomType.find({ hotelId }).lean();\n    const totalRooms = roomTypes.reduce((sum, room) => sum + room.totalRooms, 0);\n    const occupancyRate = totalRooms > 0 ? (activeCustomers / totalRooms) * 100 : 0;\n\n    return {\n      totalCustomers,\n      activeCustomers,\n      pendingRequests,\n      occupancyRate: Math.round(occupancyRate * 100) / 100,\n      totalRevenue,\n    };\n  }\n\n  // Comprehensive Reports Analytics\n  async getRoomAnalytics(hotelId: string): Promise<{\n    mostBookedRoomTypes: Array<{ roomType: string; bookings: number; revenue: number }>;\n    occupancyByRoomType: Array<{ roomType: string; occupancyRate: number; totalRooms: number; occupiedRooms: number }>;\n    revenueByRoomType: Array<{ roomType: string; revenue: number; averagePrice: number }>;\n  }> {\n    const customers = await Customer.find({ hotelId }).lean();\n    const roomTypes = await RoomType.find({ hotelId }).lean();\n    \n    // Group customers by room type\n    const bookingsByRoomType: { [key: string]: { count: number; revenue: number; prices: number[] } } = {};\n    \n    customers.forEach(customer => {\n      const roomTypeName = customer.roomTypeName;\n      if (!bookingsByRoomType[roomTypeName]) {\n        bookingsByRoomType[roomTypeName] = { count: 0, revenue: 0, prices: [] };\n      }\n      bookingsByRoomType[roomTypeName].count++;\n      bookingsByRoomType[roomTypeName].revenue += customer.roomPrice;\n      bookingsByRoomType[roomTypeName].prices.push(customer.roomPrice);\n    });\n\n    // Most booked room types\n    const mostBookedRoomTypes = Object.entries(bookingsByRoomType)\n      .map(([roomType, data]) => ({\n        roomType,\n        bookings: data.count,\n        revenue: data.revenue\n      }))\n      .sort((a, b) => b.bookings - a.bookings);\n\n    // Occupancy by room type\n    const occupancyByRoomType = roomTypes.map(roomType => {\n      const occupiedRooms = customers.filter(c => c.roomTypeName === roomType.name && c.isActive).length;\n      const occupancyRate = roomType.totalRooms > 0 ? (occupiedRooms / roomType.totalRooms) * 100 : 0;\n      \n      return {\n        roomType: roomType.name,\n        occupancyRate: Math.round(occupancyRate * 100) / 100,\n        totalRooms: roomType.totalRooms,\n        occupiedRooms\n      };\n    });\n\n    // Revenue by room type\n    const revenueByRoomType = Object.entries(bookingsByRoomType)\n      .map(([roomType, data]) => ({\n        roomType,\n        revenue: data.revenue,\n        averagePrice: Math.round(data.revenue / data.count)\n      }))\n      .sort((a, b) => b.revenue - a.revenue);\n\n    return {\n      mostBookedRoomTypes,\n      occupancyByRoomType,\n      revenueByRoomType\n    };\n  }\n\n  async getServiceRequestAnalytics(hotelId: string): Promise<{\n    completionTimeframes: Array<{ assignedTo: string; avgCompletionHours: number; completedRequests: number }>;\n    popularServices: Array<{ serviceType: string; count: number; completionRate: number }>;\n    serviceStatusBreakdown: Array<{ status: string; count: number; percentage: number }>;\n    staffPerformance: Array<{ staffMember: string; assignedRequests: number; completedRequests: number; avgTimeFrame: string }>;\n  }> {\n    const serviceRequests = await ServiceRequest.find({ hotelId }).lean();\n    const adminServices = await AdminService.find({ hotelId }).lean();\n    \n    // Service status breakdown\n    const statusCounts: { [key: string]: number } = {};\n    serviceRequests.forEach(req => {\n      statusCounts[req.status] = (statusCounts[req.status] || 0) + 1;\n    });\n    \n    const totalRequests = serviceRequests.length;\n    const serviceStatusBreakdown = Object.entries(statusCounts).map(([status, count]) => ({\n      status,\n      count,\n      percentage: Math.round((count / totalRequests) * 100)\n    }));\n\n    // Popular services\n    const serviceCounts: { [key: string]: { total: number; completed: number } } = {};\n    serviceRequests.forEach(req => {\n      const serviceType = req.service || req.type || 'other';\n      if (!serviceCounts[serviceType]) {\n        serviceCounts[serviceType] = { total: 0, completed: 0 };\n      }\n      serviceCounts[serviceType].total++;\n      if (req.status === 'completed') {\n        serviceCounts[serviceType].completed++;\n      }\n    });\n\n    const popularServices = Object.entries(serviceCounts)\n      .map(([serviceType, data]) => ({\n        serviceType,\n        count: data.total,\n        completionRate: data.total > 0 ? Math.round((data.completed / data.total) * 100) : 0\n      }))\n      .sort((a, b) => b.count - a.count);\n\n    // Staff performance based directly on service requests\n    const staffStats: { [key: string]: { assigned: number; completed: number; timeFrames: string[] } } = {};\n    \n    // Count assignments and completions from service requests\n    serviceRequests.forEach(request => {\n      if (request.assignedTo && request.status !== 'pending') {\n        if (!staffStats[request.assignedTo]) {\n          staffStats[request.assignedTo] = { assigned: 0, completed: 0, timeFrames: [] };\n        }\n        staffStats[request.assignedTo].assigned++;\n        \n        // Mark as completed if service request is completed\n        if (request.status === 'completed') {\n          staffStats[request.assignedTo].completed++;\n        }\n      }\n    });\n    \n    // Get timeframes from admin services for display\n    adminServices.forEach(service => {\n      if (staffStats[service.assignedTo]) {\n        staffStats[service.assignedTo].timeFrames.push(service.timeFrame);\n      }\n    });\n\n    const staffPerformance = Object.entries(staffStats).map(([staffMember, data]) => ({\n      staffMember,\n      assignedRequests: data.assigned,\n      completedRequests: data.completed,\n      avgTimeFrame: data.timeFrames.length > 0 ? data.timeFrames[data.timeFrames.length - 1] : '20minutes' // Most recent timeframe or default\n    }));\n\n    // Completion timeframes (calculate average hours based on completed services)\n    const completionTimeframes = staffPerformance.map(staff => {\n      // Calculate realistic completion time based on timeframe\n      let avgHours = 2; // default\n      if (staff.avgTimeFrame.includes('1 hour')) avgHours = 1;\n      else if (staff.avgTimeFrame.includes('30 minutes')) avgHours = 0.5;\n      else if (staff.avgTimeFrame.includes('2 hours')) avgHours = 2;\n      else if (staff.avgTimeFrame.includes('4 hours')) avgHours = 4;\n      \n      return {\n        assignedTo: staff.staffMember,\n        avgCompletionHours: avgHours,\n        completedRequests: staff.completedRequests\n      };\n    });\n\n    return {\n      completionTimeframes,\n      popularServices,\n      serviceStatusBreakdown,\n      staffPerformance\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":28111},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import mongoose, { Schema, Document } from 'mongoose';\nimport { z } from \"zod\";\n\n// MongoDB Document Interfaces\nexport interface IUser extends Document {\n  _id: string;\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IHotelAdmin extends Document {\n  _id: string;\n  id: string;\n  username: string;\n  password: string;\n  hotelName: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IHotel extends Document {\n  _id: string;\n  id: string;\n  name: string;\n  ownerId: string;\n  address?: string;\n  phone?: string;\n  totalRooms: number;\n  city?: string;\n  state?: string;\n  country?: string;\n  pincode?: string;\n  hotelType?: string;\n  description?: string;\n  amenities?: string[];\n  checkInTime?: string;\n  checkOutTime?: string;\n  starRating?: number;\n  website?: string;\n  email?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IRoomType extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  name: string;\n  category: 'standard' | 'deluxe' | 'suite' | 'studio';\n  type: 'single' | 'double' | 'twin' | 'triple' | 'junior_suite' | 'executive_suite' | 'presidential_suite';\n  amenities: string[];\n  price: number;\n  totalRooms: number;\n  availableRooms: number;\n  roomNumbers?: string[];\n  description?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ICustomer extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  name: string;\n  email?: string;\n  phone: string;\n  roomNumber: string;\n  roomTypeId: string;\n  roomTypeName: string;\n  roomPrice: number;\n  checkinTime: Date;\n  checkoutTime?: Date;\n  expectedStayDays?: number;\n  isActive: boolean;\n  qrCode?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface IServiceRequest extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  customerId?: string;\n  guestName?: string;\n  roomNumber: string;\n  service: string; // This is what's actually stored in MongoDB\n  notes?: string; // Additional notes field from MongoDB\n  type?: 'maintenance' | 'room_service' | 'food_delivery' | 'housekeeping' | 'concierge' | 'other';\n  description?: string;\n  status: 'pending' | 'assigned' | 'in_progress' | 'completed' | 'cancelled';\n  assignedTo?: string;\n  assignedBy?: string;\n  completedBy?: string;\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  requestedAt: Date;\n  assignedAt?: Date;\n  completedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Admin Service Collection - tracks assigned service requests\nexport interface IAdminService extends Document {\n  _id: string;\n  id: string;\n  hotelId: string;\n  serviceRequestId: string;\n  requestType: string; // autofilled from service request\n  assignedTo: string; // person name entered in form\n  timeFrame: string; // timeframe entered in form\n  service: boolean; // true when assigned, false when completed\n  assignedAt: Date;\n  completedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Mongoose Schemas\nconst userSchema = new Schema<IUser>({\n  id: { type: String, unique: true, required: true },\n  email: { type: String, unique: true, sparse: true },\n  firstName: String,\n  lastName: String,\n  profileImageUrl: String,\n}, { timestamps: true });\n\nconst hotelAdminSchema = new Schema<IHotelAdmin>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  username: { type: String, unique: true, required: true },\n  password: { type: String, required: true },\n  hotelName: { type: String, required: true },\n  email: { type: String, required: true, unique: true },\n  phone: String,\n  address: String,\n  isActive: { type: Boolean, default: true },\n}, { timestamps: true });\n\nconst hotelSchema = new Schema<IHotel>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  name: { type: String, required: true },\n  ownerId: { type: String, required: true, ref: 'User' },\n  address: String,\n  phone: String,\n  totalRooms: { type: Number, default: 0 },\n  city: String,\n  state: String,\n  country: String,\n  pincode: String,\n  hotelType: String,\n  description: String,\n  amenities: [String],\n  checkInTime: { type: String, default: \"14:00\" },\n  checkOutTime: { type: String, default: \"11:00\" },\n  starRating: Number,\n  website: String,\n  email: String,\n}, { timestamps: true });\n\nconst roomTypeSchema = new Schema<IRoomType>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  name: { type: String, required: true },\n  category: {\n    type: String,\n    enum: ['standard', 'deluxe', 'suite', 'studio'],\n    required: true\n  },\n  type: {\n    type: String,\n    enum: ['single', 'double', 'twin', 'triple', 'junior_suite', 'executive_suite', 'presidential_suite'],\n    required: true\n  },\n  amenities: [String],\n  price: { type: Number, required: true, min: 0 },\n  totalRooms: { type: Number, required: true, min: 1 },\n  availableRooms: { type: Number, required: true, min: 0 },\n  roomNumbers: [String],\n  description: String,\n}, { timestamps: true });\n\nconst customerSchema = new Schema<ICustomer>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  name: { type: String, required: true },\n  email: String,\n  phone: { type: String, required: true },\n  roomNumber: { type: String, required: true },\n  roomTypeId: { type: String, required: true, ref: 'RoomType' },\n  roomTypeName: { type: String, required: true },\n  roomPrice: { type: Number, required: true, min: 0 },\n  checkinTime: { type: Date, default: Date.now },\n  checkoutTime: Date,\n  expectedStayDays: Number,\n  isActive: { type: Boolean, default: true },\n  qrCode: String,\n}, { timestamps: true });\n\nconst serviceRequestSchema = new Schema<IServiceRequest>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  customerId: { type: String, ref: 'Customer' },\n  roomNumber: { type: String, required: true },\n  type: {\n    type: String,\n    enum: ['maintenance', 'room_service', 'food_delivery', 'housekeeping', 'concierge', 'other'],\n    required: true\n  },\n  description: { type: String, required: true },\n  status: {\n    type: String,\n    enum: ['pending', 'assigned', 'in_progress', 'completed', 'cancelled'],\n    default: 'pending'\n  },\n  assignedTo: String,\n  assignedBy: String,\n  completedBy: String,\n  priority: {\n    type: String,\n    enum: ['low', 'normal', 'high', 'urgent'],\n    default: 'normal'\n  },\n  requestedAt: { type: Date, default: Date.now },\n  assignedAt: Date,\n  completedAt: Date,\n  guestName: String,\n  service: String,\n  notes: String,\n}, { timestamps: true });\n\n// Admin Service Schema\nconst adminServiceSchema = new Schema<IAdminService>({\n  id: { type: String, unique: true, required: true, default: () => new mongoose.Types.ObjectId().toString() },\n  hotelId: { type: String, required: true, ref: 'Hotel' },\n  serviceRequestId: { type: String, required: true, ref: 'ServiceRequest' },\n  requestType: { type: String, required: true },\n  assignedTo: { type: String, required: true },\n  timeFrame: { type: String, required: true },\n  service: { type: Boolean, default: true },\n  assignedAt: { type: Date, default: Date.now },\n  completedAt: Date,\n}, { timestamps: true });\n\n// Mongoose Models\nexport const User = mongoose.models.User || mongoose.model<IUser>('User', userSchema);\nexport const HotelAdmin = mongoose.models.HotelAdmin || mongoose.model<IHotelAdmin>('HotelAdmin', hotelAdminSchema);\nexport const Hotel = mongoose.models.Hotel || mongoose.model<IHotel>('Hotel', hotelSchema);\nexport const RoomType = mongoose.models.RoomType || mongoose.model<IRoomType>('RoomType', roomTypeSchema);\nexport const Customer = mongoose.models.Customer || mongoose.model<ICustomer>('Customer', customerSchema);\nexport const ServiceRequest = mongoose.models.ServiceRequest || mongoose.model<IServiceRequest>('ServiceRequest', serviceRequestSchema);\nexport const AdminService = mongoose.models.AdminService || mongoose.model<IAdminService>('AdminService', adminServiceSchema);\n\n// Zod Validation Schemas\nexport const insertHotelSchema = z.object({\n  name: z.string().min(1, \"Hotel name is required\"),\n  ownerId: z.string(),\n  address: z.string().optional(),\n  phone: z.string().optional(),\n  totalRooms: z.number().min(0).optional(),\n});\n\nexport const insertCustomerSchema = z.object({\n  hotelId: z.string(),\n  name: z.string().min(1, \"Customer name is required\"),\n  email: z.string().email().optional().or(z.literal(\"\")),\n  phone: z.string().min(1, \"Phone number is required\"),\n  roomNumber: z.string().min(1, \"Room number is required\"),\n  roomTypeId: z.string().min(1, \"Room type is required\"),\n  roomTypeName: z.string().min(1, \"Room type name is required\"),\n  roomPrice: z.number().min(0, \"Room price must be positive\"),\n  checkinTime: z.date().optional(),\n  checkoutTime: z.date().optional(),\n  expectedStayDays: z.number().min(1).optional(),\n  isActive: z.boolean().optional(),\n  qrCode: z.string().optional(),\n});\n\nexport const insertHotelAdminSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  hotelName: z.string().min(1, \"Hotel name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\nexport const insertServiceRequestSchema = z.object({\n  hotelId: z.string(),\n  customerId: z.string().optional(),\n  roomNumber: z.string().min(1, \"Room number is required\"),\n  type: z.enum(['maintenance', 'room_service', 'food_delivery', 'housekeeping', 'concierge', 'other']),\n  description: z.string().min(1, \"Description is required\"),\n  status: z.enum(['pending', 'assigned', 'in_progress', 'completed', 'cancelled']).optional(),\n  assignedTo: z.string().optional(),\n  assignedBy: z.string().optional(),\n  completedBy: z.string().optional(),\n  priority: z.enum(['low', 'normal', 'high', 'urgent']).optional(),\n  requestedAt: z.date().optional(),\n  assignedAt: z.date().optional(),\n  completedAt: z.date().optional(),\n});\n\n// Type exports\nexport type UpsertUser = {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n};\n\nexport type UserType = IUser;\nexport type HotelAdminType = IHotelAdmin;\nexport type HotelType = IHotel;\nexport type RoomTypeType = IRoomType;\nexport type CustomerType = ICustomer;\nexport type ServiceRequestType = IServiceRequest;\nexport type AdminServiceType = IAdminService;\n\nexport type InsertHotel = z.infer<typeof insertHotelSchema>;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type InsertServiceRequest = z.infer<typeof insertServiceRequestSchema>;\n\n// Backwards compatibility type aliases\nexport type User = UserType;\nexport type Hotel = HotelType;\nexport type Customer = CustomerType;\nexport type ServiceRequest = ServiceRequestType;","size_bytes":11287},"shared/types.ts":{"content":"import { z } from \"zod\";\n\n// Base interfaces for frontend\nexport interface User {\n  _id?: string;\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface HotelAdmin {\n  _id?: string;\n  id: string;\n  username: string;\n  password?: string; // Excluded in responses\n  hotelName: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Hotel {\n  _id?: string;\n  id: string;\n  name: string;\n  ownerId: string;\n  address?: string;\n  phone?: string;\n  totalRooms: number;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface RoomType {\n  _id?: string;\n  id: string;\n  hotelId: string;\n  name: string;\n  category: 'standard' | 'deluxe' | 'suite' | 'studio';\n  type: 'single' | 'double' | 'twin' | 'triple' | 'junior_suite' | 'executive_suite' | 'presidential_suite';\n  amenities: string[];\n  price: number;\n  totalRooms: number;\n  availableRooms: number;\n  roomNumbers?: string[]; // Array of room numbers for this room type\n  description?: string;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Customer {\n  _id?: string;\n  id: string;\n  hotelId: string;\n  name: string;\n  email?: string;\n  phone: string;\n  roomNumber: string;\n  roomTypeId: string;\n  roomTypeName: string;\n  roomPrice: number;\n  checkinTime: Date;\n  checkoutTime?: Date;\n  expectedStayDays?: number;\n  isActive: boolean;\n  qrCode?: string; // base64 QR code string\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ServiceRequest {\n  _id?: string;\n  id: string;\n  hotelId: string;\n  customerId?: string;\n  guestName?: string;\n  roomNumber: string;\n  service: string; // This is what's actually stored in MongoDB\n  notes?: string; // Additional notes field from MongoDB\n  type?: 'maintenance' | 'room_service' | 'food_delivery' | 'housekeeping' | 'concierge' | 'other';\n  description?: string;\n  status: 'pending' | 'assigned' | 'in_progress' | 'completed' | 'cancelled';\n  assignedTo?: string;\n  assignedBy?: string;\n  completedBy?: string;\n  priority: 'low' | 'normal' | 'high' | 'urgent';\n  requestedAt: Date;\n  assignedAt?: Date;\n  completedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface Room {\n  _id?: string;\n  id: string;\n  hotelId: string;\n  roomNumber: string;\n  roomTypeId: string;\n  roomTypeName: string;\n  qrCode?: string; // base64 QR code string\n  qrCodeUrl?: string; // URL for QR code scanning\n  isOccupied: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface AdminService {\n  _id?: string;\n  id: string;\n  hotelId: string;\n  serviceRequestId: string;\n  requestType: string; // autofilled from service request\n  assignedTo: string; // person name entered in form\n  timeFrame: string; // timeframe entered in form\n  service: boolean; // true when assigned, false when completed\n  assignedAt: Date;\n  completedAt?: Date;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\n// Zod Validation Schemas\nexport const insertHotelSchema = z.object({\n  name: z.string().min(1, \"Hotel name is required\"),\n  ownerId: z.string(),\n  address: z.string().optional(),\n  phone: z.string().optional(),\n  totalRooms: z.number().min(0).optional(),\n});\n\nexport const insertRoomTypeSchema = z.object({\n  hotelId: z.string(),\n  name: z.string().min(1, \"Room type name is required\"),\n  category: z.enum(['standard', 'deluxe', 'suite', 'studio']),\n  type: z.enum(['single', 'double', 'twin', 'triple', 'junior_suite', 'executive_suite', 'presidential_suite']),\n  amenities: z.array(z.string()).default([]),\n  price: z.number().min(0, \"Price must be positive\"),\n  totalRooms: z.number().min(1, \"Must have at least 1 room\"),\n  description: z.string().optional(),\n});\n\nexport const insertCustomerSchema = z.object({\n  hotelId: z.string(),\n  name: z.string().min(1, \"Customer name is required\"),\n  email: z.string().email(\"Please enter a valid email address\").optional().or(z.literal(\"\")),\n  phone: z.string()\n    .min(1, \"Phone number is required\")\n    .regex(/^[+]?[1-9]\\d{1,14}$/, \"Please enter a valid phone number with country code (e.g., +1234567890)\"),\n  roomNumber: z.string().min(1, \"Room number is required\"),\n  roomTypeId: z.string().min(1, \"Room type is required\"),\n  roomTypeName: z.string().min(1, \"Room type name is required\"),\n  roomPrice: z.number().min(0, \"Room price must be positive\"),\n  checkinTime: z.date().optional(),\n  checkoutTime: z.date().optional(),\n  expectedStayDays: z.number().min(1).optional(),\n  isActive: z.boolean().optional(),\n  qrCode: z.string().optional(), // base64 QR code string\n});\n\nexport const insertHotelAdminSchema = z.object({\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  hotelName: z.string().min(1, \"Hotel name is required\"),\n  email: z.string().email(\"Valid email is required\"),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n});\n\nexport const insertServiceRequestSchema = z.object({\n  hotelId: z.string(),\n  customerId: z.string().optional(),\n  roomNumber: z.string().min(1, \"Room number is required\"),\n  type: z.enum(['maintenance', 'room_service', 'food_delivery', 'housekeeping', 'concierge', 'other']),\n  description: z.string().min(1, \"Description is required\"),\n  status: z.enum(['pending', 'assigned', 'in_progress', 'completed', 'cancelled']).optional(),\n  assignedTo: z.string().optional(),\n  priority: z.enum(['low', 'normal', 'high', 'urgent']).optional(),\n  requestedAt: z.date().optional(),\n  assignedAt: z.date().optional(),\n  completedAt: z.date().optional(),\n});\n\n// Type exports\nexport type UpsertUser = {\n  id: string;\n  email?: string;\n  firstName?: string;\n  lastName?: string;\n  profileImageUrl?: string;\n};\n\nexport const insertRoomSchema = z.object({\n  hotelId: z.string(),\n  roomNumber: z.string().min(1, \"Room number is required\"),\n  roomTypeId: z.string().min(1, \"Room type is required\"),\n  roomTypeName: z.string().min(1, \"Room type name is required\"),\n  qrCode: z.string().optional(),\n  qrCodeUrl: z.string().optional(),\n  isOccupied: z.boolean().default(false),\n});\n\nexport const insertAdminServiceSchema = z.object({\n  hotelId: z.string(),\n  serviceRequestId: z.string(),\n  requestType: z.string(),\n  assignedTo: z.string().min(1, \"Assigned person is required\"),\n  timeFrame: z.string().min(1, \"Time frame is required\"),\n  service: z.boolean().default(true),\n});\n\nexport type InsertHotel = z.infer<typeof insertHotelSchema>;\nexport type InsertHotelAdmin = z.infer<typeof insertHotelAdminSchema>;\nexport type InsertRoomType = z.infer<typeof insertRoomTypeSchema>;\nexport type InsertRoom = z.infer<typeof insertRoomSchema>;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type InsertServiceRequest = z.infer<typeof insertServiceRequestSchema>;\nexport type InsertAdminService = z.infer<typeof insertAdminServiceSchema>;","size_bytes":6934},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Landing from \"@/pages/landing\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Customers from \"@/pages/customers\";\nimport Rooms from \"@/pages/rooms\";\nimport ServiceRequests from \"@/pages/service-requests\";\nimport Reports from \"@/pages/reports\";\nimport HotelSetup from \"@/pages/hotel-setup\";\nimport Sidebar from \"@/components/sidebar\";\nimport NotFound from \"@/pages/not-found\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Hotel } from \"@shared/types\";\n\ninterface HotelStats {\n  totalCustomers: number;\n  activeCustomers: number;\n  pendingRequests: number;\n  occupancyRate: number;\n  totalRevenue: number;\n}\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  const { data: hotel } = useQuery<Hotel>({\n    queryKey: [\"/api/hotel\"],\n    enabled: isAuthenticated,\n  });\n\n  const { data: stats } = useQuery<HotelStats>({\n    queryKey: [\"/api/analytics/stats\"],\n    enabled: isAuthenticated,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return <Landing />;\n  }\n\n  // Show hotel setup if user doesn't have a hotel yet\n  if (isAuthenticated && hotel === null) {\n    return <HotelSetup />;\n  }\n\n  return (\n    <div className=\"min-h-screen flex bg-gray-50\">\n      <Sidebar \n        hotelName={hotel?.name || \"Hotel\"} \n        pendingRequestsCount={stats?.pendingRequests || 0}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/customers\" component={Customers} />\n          <Route path=\"/service-requests\" component={ServiceRequests} />\n          <Route path=\"/rooms\" component={Rooms} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <AppContent />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2656},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217.8, 91.2%, 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(217.8, 91.2%, 59.8%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(217.8, 91.2%, 59.8%);\n  --chart-1: hsl(217.8, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217.8, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(217.8, 91.2%, 59.8%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(217.8, 91.2%, 59.8%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 1px 2px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 1px 2px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 2px 4px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 4px 6px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 8px 10px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(217.8, 91.2%, 59.8%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(217.8, 91.2%, 59.8%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217.8, 91.2%, 59.8%);\n  --chart-1: hsl(217.8, 91.2%, 59.8%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(217.8, 91.2%, 59.8%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(217.8, 91.2%, 59.8%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(217.8, 91.2%, 59.8%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 1px 2px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 1px 2px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 2px 4px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 4px 6px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00), 0px 8px 10px -1px hsl(217.8, 91.2%, 59.8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(217.8, 91.2%, 59.8% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n}\n\n/* Custom scrollbar styles */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(240 1.9608% 90%);\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(217.8, 91.2%, 59.8%);\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(217.8, 85%, 50%);\n}\n\n/* Table hover effects */\n.table-hover:hover {\n  background-color: hsl(240 1.9608% 95%);\n}\n\n/* Sidebar active state */\n.sidebar-active {\n  background-color: hsl(217.8, 91.2%, 59.8%);\n  color: white;\n}\n","size_bytes":5409},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/HotelSetupForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface HotelSetupFormProps {\n  onComplete: () => void;\n}\n\nexport default function HotelSetupForm({ onComplete }: HotelSetupFormProps) {\n  const [formData, setFormData] = useState({\n    hotelName: \"\",\n    address: \"\",\n    city: \"\",\n    state: \"\",\n    country: \"\",\n    pincode: \"\",\n    phone: \"\",\n    email: \"\",\n    hotelType: \"\",\n    totalRooms: \"\",\n    description: \"\",\n    amenities: [] as string[],\n    checkInTime: \"14:00\",\n    checkOutTime: \"11:00\",\n    starRating: \"\",\n    website: \"\"\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const availableAmenities = [\n    \"Free WiFi\", \"Swimming Pool\", \"Gym\", \"Spa\", \"Restaurant\", \n    \"Room Service\", \"Parking\", \"Business Center\", \"Conference Rooms\",\n    \"Airport Shuttle\", \"Pet Friendly\", \"Laundry Service\", \"Concierge\",\n    \"Bar/Lounge\", \"Tennis Court\", \"Golf Course\"\n  ];\n\n  const hotelTypes = [\n    \"Budget Hotel\", \"Business Hotel\", \"Luxury Hotel\", \"Resort\", \n    \"Boutique Hotel\", \"Extended Stay\", \"Motel\", \"Bed & Breakfast\", \"Hostel\"\n  ];\n\n  const setupMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest('POST', '/api/hotel/setup', data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotel\"] });\n      toast({\n        title: \"Hotel Setup Complete!\",\n        description: \"Your hotel details have been saved successfully.\",\n      });\n      onComplete();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Setup Failed\",\n        description: error.message || \"An error occurred during setup\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.hotelName || !formData.address || !formData.totalRooms) {\n      toast({\n        title: \"Missing Required Fields\",\n        description: \"Please fill in hotel name, address, and total rooms.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setupMutation.mutate(formData);\n  };\n\n  const handleAmenityChange = (amenity: string, checked: boolean) => {\n    if (checked) {\n      setFormData(prev => ({\n        ...prev,\n        amenities: [...prev.amenities, amenity]\n      }));\n    } else {\n      setFormData(prev => ({\n        ...prev,\n        amenities: prev.amenities.filter(a => a !== amenity)\n      }));\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl\">Complete Your Hotel Setup</CardTitle>\n          <p className=\"text-gray-600 mt-2\">\n            Please provide detailed information about your hotel to get started\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-6\">\n            {/* Basic Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">Basic Information</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"hotelName\">Hotel Name *</Label>\n                  <Input\n                    id=\"hotelName\"\n                    value={formData.hotelName}\n                    onChange={(e) => setFormData(prev => ({ ...prev, hotelName: e.target.value }))}\n                    placeholder=\"Enter your hotel name\"\n                    required\n                    data-testid=\"input-hotel-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"hotelType\">Hotel Type</Label>\n                  <Select onValueChange={(value) => setFormData(prev => ({ ...prev, hotelType: value }))}>\n                    <SelectTrigger data-testid=\"select-hotel-type\">\n                      <SelectValue placeholder=\"Select hotel type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {hotelTypes.map(type => (\n                        <SelectItem key={type} value={type}>{type}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"totalRooms\">Total Rooms *</Label>\n                  <Input\n                    id=\"totalRooms\"\n                    type=\"number\"\n                    min=\"1\"\n                    value={formData.totalRooms}\n                    onChange={(e) => setFormData(prev => ({ ...prev, totalRooms: e.target.value }))}\n                    placeholder=\"Number of rooms\"\n                    required\n                    data-testid=\"input-total-rooms\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"starRating\">Star Rating</Label>\n                  <Select onValueChange={(value) => setFormData(prev => ({ ...prev, starRating: value }))}>\n                    <SelectTrigger data-testid=\"select-star-rating\">\n                      <SelectValue placeholder=\"Select rating\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 Star</SelectItem>\n                      <SelectItem value=\"2\">2 Star</SelectItem>\n                      <SelectItem value=\"3\">3 Star</SelectItem>\n                      <SelectItem value=\"4\">4 Star</SelectItem>\n                      <SelectItem value=\"5\">5 Star</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Information */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">Contact Information</h3>\n              \n              <div>\n                <Label htmlFor=\"address\">Address *</Label>\n                <Textarea\n                  id=\"address\"\n                  value={formData.address}\n                  onChange={(e) => setFormData(prev => ({ ...prev, address: e.target.value }))}\n                  placeholder=\"Enter complete hotel address\"\n                  required\n                  data-testid=\"input-address\"\n                />\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div>\n                  <Label htmlFor=\"city\">City</Label>\n                  <Input\n                    id=\"city\"\n                    value={formData.city}\n                    onChange={(e) => setFormData(prev => ({ ...prev, city: e.target.value }))}\n                    placeholder=\"City\"\n                    data-testid=\"input-city\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"state\">State</Label>\n                  <Input\n                    id=\"state\"\n                    value={formData.state}\n                    onChange={(e) => setFormData(prev => ({ ...prev, state: e.target.value }))}\n                    placeholder=\"State\"\n                    data-testid=\"input-state\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"pincode\">Pincode</Label>\n                  <Input\n                    id=\"pincode\"\n                    value={formData.pincode}\n                    onChange={(e) => setFormData(prev => ({ ...prev, pincode: e.target.value }))}\n                    placeholder=\"Pincode\"\n                    data-testid=\"input-pincode\"\n                  />\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData(prev => ({ ...prev, phone: e.target.value }))}\n                    placeholder=\"Hotel phone number\"\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData(prev => ({ ...prev, email: e.target.value }))}\n                    placeholder=\"Hotel email\"\n                    data-testid=\"input-email\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Hotel Policies */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">Hotel Policies</h3>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"checkInTime\">Check-in Time</Label>\n                  <Input\n                    id=\"checkInTime\"\n                    type=\"time\"\n                    value={formData.checkInTime}\n                    onChange={(e) => setFormData(prev => ({ ...prev, checkInTime: e.target.value }))}\n                    data-testid=\"input-checkin-time\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"checkOutTime\">Check-out Time</Label>\n                  <Input\n                    id=\"checkOutTime\"\n                    type=\"time\"\n                    value={formData.checkOutTime}\n                    onChange={(e) => setFormData(prev => ({ ...prev, checkOutTime: e.target.value }))}\n                    data-testid=\"input-checkout-time\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            {/* Amenities */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">Hotel Amenities</h3>\n              \n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                {availableAmenities.map(amenity => (\n                  <div key={amenity} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={amenity}\n                      checked={formData.amenities.includes(amenity)}\n                      onCheckedChange={(checked) => handleAmenityChange(amenity, checked as boolean)}\n                      data-testid={`checkbox-${amenity.toLowerCase().replace(/\\s+/g, '-')}`}\n                    />\n                    <Label htmlFor={amenity} className=\"text-sm\">{amenity}</Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Description */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-semibold border-b pb-2\">Additional Information</h3>\n              \n              <div>\n                <Label htmlFor=\"description\">Hotel Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={formData.description}\n                  onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}\n                  placeholder=\"Describe your hotel, unique features, and what makes it special...\"\n                  rows={3}\n                  data-testid=\"input-description\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"website\">Website (Optional)</Label>\n                <Input\n                  id=\"website\"\n                  type=\"url\"\n                  value={formData.website}\n                  onChange={(e) => setFormData(prev => ({ ...prev, website: e.target.value }))}\n                  placeholder=\"https://yourhotel.com\"\n                  data-testid=\"input-website\"\n                />\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={setupMutation.isPending}\n              data-testid=\"button-complete-setup\"\n            >\n              {setupMutation.isPending ? \"Saving Hotel Details...\" : \"Complete Hotel Setup\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13084},"client/src/components/LoginForm.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport RegistrationForm from \"./RegistrationForm\";\n\nexport function LoginForm() {\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [showRegistration, setShowRegistration] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: { username: string; password: string }) => {\n      const response = await apiRequest('POST', '/api/login', credentials);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Login successful\",\n        description: `Welcome to ${data.user?.hotelName || 'your hotel'} dashboard!`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    loginMutation.mutate({ username, password });\n  };\n\n  const handleRegistrationSuccess = () => {\n    setShowRegistration(false);\n    queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n  };\n\n  if (showRegistration) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n        <RegistrationForm\n          onSuccess={handleRegistrationSuccess}\n          onSwitchToLogin={() => setShowRegistration(false)}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl text-center\">Sign in to your dashboard</CardTitle>\n          <p className=\"text-sm text-gray-600 text-center\">\n            Enter your credentials to access the hotel management system\n          </p>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"username\">Username</Label>\n              <Input\n                id=\"username\"\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                placeholder=\"Enter username\"\n                required\n                data-testid=\"input-username\"\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"password\">Password</Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                placeholder=\"Enter password\"\n                required\n                data-testid=\"input-password\"\n              />\n            </div>\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign in\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-4 text-center\">\n            <Button\n              type=\"button\"\n              variant=\"link\"\n              onClick={() => setShowRegistration(true)}\n              data-testid=\"button-switch-register\"\n            >\n              Don't have an account? Create one for your hotel\n            </Button>\n          </div>\n          \n\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4125},"client/src/components/RegistrationForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertHotelAdminSchema } from \"@shared/types\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ntype FormData = z.infer<typeof insertHotelAdminSchema>;\n\ninterface RegistrationFormProps {\n  onSuccess: () => void;\n  onSwitchToLogin: () => void;\n}\n\nexport default function RegistrationForm({ onSuccess, onSwitchToLogin }: RegistrationFormProps) {\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    watch,\n  } = useForm<FormData>({\n    resolver: zodResolver(insertHotelAdminSchema),\n  });\n\n  const onSubmit = async (data: FormData) => {\n    setIsLoading(true);\n    try {\n      const response = await apiRequest(\"POST\", \"/api/register\", data);\n      const result = await response.json();\n      \n      if (result.success) {\n        toast({\n          title: \"Account Created Successfully!\",\n          description: \"You can now login with your credentials.\",\n        });\n        // Go back to login page after successful registration\n        onSwitchToLogin();\n      } else {\n        throw new Error(result.message || \"Registration failed\");\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"An error occurred during registration\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"text-center\">\n        <CardTitle>Create Hotel Account</CardTitle>\n        <CardDescription>\n          Register your hotel to start managing customers and services\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"hotelName\">Hotel Name</Label>\n            <Input\n              id=\"hotelName\"\n              {...register(\"hotelName\")}\n              placeholder=\"Enter your hotel name\"\n              data-testid=\"input-hotel-name\"\n            />\n            {errors.hotelName && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.hotelName.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"username\">Username</Label>\n            <Input\n              id=\"username\"\n              {...register(\"username\")}\n              placeholder=\"Choose a username\"\n              data-testid=\"input-username\"\n            />\n            {errors.username && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.username.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"password\">Password</Label>\n            <Input\n              id=\"password\"\n              type=\"text\"\n              {...register(\"password\")}\n              placeholder=\"Create a password\"\n              data-testid=\"input-password\"\n            />\n            {errors.password && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.password.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email Address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...register(\"email\")}\n              placeholder=\"Enter your email\"\n              data-testid=\"input-email\"\n            />\n            {errors.email && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\">Phone Number (Optional)</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              {...register(\"phone\")}\n              placeholder=\"Enter phone number\"\n              data-testid=\"input-phone\"\n            />\n            {errors.phone && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.phone.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"address\">Address (Optional)</Label>\n            <Input\n              id=\"address\"\n              {...register(\"address\")}\n              placeholder=\"Enter hotel address\"\n              data-testid=\"input-address\"\n            />\n            {errors.address && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.address.message}</p>\n            )}\n          </div>\n\n          <Button\n            type=\"submit\"\n            className=\"w-full\"\n            disabled={isLoading}\n            data-testid=\"button-register\"\n          >\n            {isLoading ? \"Creating Account...\" : \"Create Hotel Account\"}\n          </Button>\n\n          <div className=\"text-center\">\n            <Button\n              type=\"button\"\n              variant=\"link\"\n              onClick={onSwitchToLogin}\n              data-testid=\"button-switch-login\"\n            >\n              Already have an account? Sign in\n            </Button>\n          </div>\n        </form>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5427},"client/src/components/add-customer-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { insertCustomerSchema, RoomType, Customer } from \"@shared/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, QrCode, User, Phone, Mail, Bed, Calendar, Printer } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\nconst formSchema = insertCustomerSchema.omit({ hotelId: true, roomTypeName: true, roomPrice: true }).extend({\n  checkinTime: z.string().optional(),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\ninterface AddCustomerModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport default function AddCustomerModal({ open, onOpenChange }: AddCustomerModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [successData, setSuccessData] = useState<Customer | null>(null);\n  const [showSuccessPage, setShowSuccessPage] = useState(false);\n\n  // Fetch room types\n  const { data: roomTypes = [] } = useQuery<RoomType[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  const { data: availableRooms = {} } = useQuery<{ [roomTypeId: string]: string[] }>({\n    queryKey: [\"/api/available-rooms\"],\n  });\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    watch,\n    setValue,\n    formState: { errors },\n  } = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      checkinTime: new Date(new Date().getTime() + (5.5 * 60 * 60 * 1000)).toISOString().slice(0, 19),\n      isActive: true,\n      name: '',\n      phone: '',\n      email: '',\n      roomTypeId: '',\n      roomNumber: '',\n      expectedStayDays: 1,\n    },\n  });\n\n  const createCustomerMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      // Find the selected room type to get pricing info\n      const selectedRoomType = roomTypes.find((rt: RoomType) => rt.id === data.roomTypeId);\n      \n      if (!selectedRoomType) {\n        throw new Error(\"Please select a valid room type\");\n      }\n\n      const customerData = {\n        ...data,\n        roomTypeName: selectedRoomType.name,\n        roomPrice: selectedRoomType.price,\n        checkinTime: data.checkinTime ? new Date(data.checkinTime).toISOString() : new Date(new Date().getTime() + (5.5 * 60 * 60 * 1000)).toISOString(),\n      };\n      \n      const response = await apiRequest(\"POST\", \"/api/customers\", customerData);\n      const result = await response.json();\n      return result;\n    },\n    onSuccess: (data: Customer) => {\n      setSuccessData(data);\n      setShowSuccessPage(true);\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/available-rooms\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to add customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    // Basic validation\n    if (!data.name || data.name.trim() === '') {\n      toast({\n        title: \"Validation Error\",\n        description: \"Customer name is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!data.phone || data.phone.trim() === '') {\n      toast({\n        title: \"Validation Error\",\n        description: \"Phone number is required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Enhanced phone number validation\n    const phoneRegex = /^[+]?[1-9]\\d{1,14}$/;\n    if (!phoneRegex.test(data.phone.replace(/\\s/g, ''))) {\n      toast({\n        title: \"Invalid Phone Number\",\n        description: \"Please enter a valid phone number with country code (e.g., +91 9876543210)\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Email validation (if provided)\n    if (data.email && data.email.trim() !== '') {\n      const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n      if (!emailRegex.test(data.email)) {\n        toast({\n          title: \"Invalid Email\",\n          description: \"Please enter a valid email address\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n    }\n    \n    if (!data.roomTypeId) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a room type\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    if (!data.roomNumber) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please select a room number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    createCustomerMutation.mutate(data);\n  };\n\n  const handleCloseModal = () => {\n    setShowSuccessPage(false);\n    setSuccessData(null);\n    onOpenChange(false);\n    reset();\n  };\n\n  const handlePrintQR = () => {\n    if (successData?.qrCode) {\n      const printWindow = window.open('', '_blank');\n      if (printWindow) {\n        printWindow.document.write(`\n          <html>\n            <head>\n              <title>QR Code - Room ${successData.roomNumber}</title>\n              <style>\n                body { text-align: center; font-family: Arial, sans-serif; margin: 40px; }\n                .qr-container { border: 2px solid #ccc; padding: 20px; display: inline-block; }\n                h2 { margin-bottom: 20px; }\n                .guest-info { margin: 20px 0; }\n              </style>\n            </head>\n            <body>\n              <h2>Hotel Service QR Code</h2>\n              <div class=\"guest-info\">\n                <p><strong>Guest:</strong> ${successData.name}</p>\n                <p><strong>Room:</strong> ${successData.roomNumber}</p>\n                <p><strong>Room Type:</strong> ${successData.roomTypeName}</p>\n              </div>\n              <div class=\"qr-container\">\n                <img src=\"${successData.qrCode}\" alt=\"QR Code\" style=\"max-width: 200px; height: auto;\" />\n              </div>\n              <p style=\"margin-top: 20px; font-size: 12px; color: #666;\">\n                Scan this QR code to access hotel services\n              </p>\n            </body>\n          </html>\n        `);\n        printWindow.document.close();\n        printWindow.print();\n      }\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={handleCloseModal}>\n      <DialogContent className=\"w-[95vw] max-w-md sm:max-w-lg md:max-w-xl lg:max-w-2xl mx-auto max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {showSuccessPage ? \"Guest Added Successfully!\" : \"Add New Customer\"}\n          </DialogTitle>\n        </DialogHeader>\n        \n        {showSuccessPage && successData ? (\n          <div className=\"space-y-6 p-1\">\n            {/* Success Header */}\n            <div className=\"flex items-center justify-center space-x-3 py-4\">\n              <CheckCircle className=\"w-12 h-12 text-green-500\" />\n              <div className=\"text-center\">\n                <h3 className=\"text-lg font-semibold text-green-700\">Guest Added Successfully!</h3>\n                <p className=\"text-sm text-gray-600\">QR code generated and ready for use</p>\n              </div>\n            </div>\n\n            {/* Guest Details */}\n            <Card className=\"border-green-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                  <User className=\"w-5 h-5\" />\n                  <span>Guest Details</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <User className=\"w-4 h-4 text-gray-400\" />\n                    <span className=\"font-medium\">{successData.name}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Bed className=\"w-4 h-4 text-gray-400\" />\n                    <span>Room {successData.roomNumber}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Phone className=\"w-4 h-4 text-gray-400\" />\n                    <span>{successData.phone}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant=\"secondary\">{successData.roomTypeName}</Badge>\n                  </div>\n                  {successData.email && (\n                    <div className=\"flex items-center space-x-2 md:col-span-2\">\n                      <Mail className=\"w-4 h-4 text-gray-400\" />\n                      <span>{successData.email}</span>\n                    </div>\n                  )}\n                  <div className=\"flex items-center space-x-2 md:col-span-2\">\n                    <Calendar className=\"w-4 h-4 text-gray-400\" />\n                    <span>Check-in: {(() => {\n                      try {\n                        const date = new Date(successData.checkinTime!);\n                        if (isNaN(date.getTime())) return \"Invalid date\";\n                        return format(date, \"MMM dd, yyyy 'at' h:mm a\");\n                      } catch {\n                        return \"Invalid date\";\n                      }\n                    })()}</span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* QR Code Section */}\n            <Card className=\"border-blue-200\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center space-x-2 text-lg\">\n                  <QrCode className=\"w-5 h-5\" />\n                  <span>Hotel Service QR Code</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"text-center space-y-4\">\n                {successData.qrCode && (\n                  <div className=\"flex flex-col items-center space-y-4\">\n                    <div className=\"border-2 border-gray-200 rounded-lg p-4 bg-white\">\n                      <img \n                        src={successData.qrCode} \n                        alt=\"QR Code for Hotel Services\" \n                        className=\"max-w-[200px] h-auto mx-auto\"\n                      />\n                    </div>\n                    <div className=\"text-sm text-gray-600 max-w-md\">\n                      <p className=\"font-medium mb-2\">Instructions for Guest:</p>\n                      <ul className=\"text-left space-y-1\">\n                        <li>• Scan this QR code with your phone camera</li>\n                        <li>• Access hotel services instantly</li>\n                        <li>• Request room service, maintenance, or concierge</li>\n                      </ul>\n                    </div>\n                    <Button \n                      onClick={handlePrintQR} \n                      variant=\"outline\" \n                      className=\"flex items-center space-x-2\"\n                    >\n                      <Printer className=\"w-4 h-4\" />\n                      <span>Print QR Code</span>\n                    </Button>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            {/* Action Buttons */}\n            <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                className=\"flex-1\"\n                onClick={() => {\n                  setShowSuccessPage(false);\n                  setSuccessData(null);\n                  reset();\n                }}\n              >\n                Add Another Guest\n              </Button>\n              <Button\n                type=\"button\"\n                className=\"flex-1 bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700 text-white\"\n                onClick={handleCloseModal}\n              >\n                Done\n              </Button>\n            </div>\n          </div>\n        ) : (\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4 p-1\">\n          <div>\n            <Label htmlFor=\"name\">Customer Name</Label>\n            <Input\n              id=\"name\"\n              {...register(\"name\")}\n              placeholder=\"Enter customer name\"\n              data-testid=\"input-customer-name\"\n            />\n            {errors.name && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.name.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"phone\">Phone Number</Label>\n            <Input\n              id=\"phone\"\n              type=\"tel\"\n              {...register(\"phone\")}\n              placeholder=\"Enter phone number with country code (e.g., +91 9876543210)\"\n              data-testid=\"input-customer-phone\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Include country code (e.g., +91 for India, +1 for US/Canada, +44 for UK)\n            </p>\n            {errors.phone && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.phone.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"email\">Email Address</Label>\n            <Input\n              id=\"email\"\n              type=\"email\"\n              {...register(\"email\")}\n              placeholder=\"Enter valid email address (e.g., guest@example.com)\"\n              data-testid=\"input-customer-email\"\n            />\n            <p className=\"text-xs text-gray-500 mt-1\">\n              Optional - Valid email format required if provided\n            </p>\n            {errors.email && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.email.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"roomTypeId\">Room Type</Label>\n            <Select\n              value={watch(\"roomTypeId\") || \"\"}\n              onValueChange={(value) => {\n                setValue(\"roomTypeId\", value, { shouldValidate: true });\n                setValue(\"roomNumber\", \"\", { shouldValidate: true }); // Reset room number when room type changes\n              }}\n            >\n              <SelectTrigger data-testid=\"select-room-type\">\n                <SelectValue placeholder=\"Select room type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {roomTypes.map((roomType: RoomType) => {\n                  const availableCount = availableRooms[roomType.id]?.length || 0;\n                  return (\n                    <SelectItem \n                      key={roomType.id} \n                      value={roomType.id}\n                      disabled={availableCount === 0}\n                    >\n                      <div className=\"flex flex-col\">\n                        <span>{roomType.name}</span>\n                        <span className=\"text-xs text-gray-500\">\n                          ₹{roomType.price}/night • {availableCount} available\n                        </span>\n                      </div>\n                    </SelectItem>\n                  );\n                })}\n              </SelectContent>\n            </Select>\n            {errors.roomTypeId && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.roomTypeId.message}</p>\n            )}\n          </div>\n\n          {watch(\"roomTypeId\") && (\n            <div>\n              <Label htmlFor=\"roomNumber\">Available Room Numbers</Label>\n              <Select\n                value={watch(\"roomNumber\") || \"\"}\n                onValueChange={(value) => setValue(\"roomNumber\", value, { shouldValidate: true })}\n              >\n                <SelectTrigger data-testid=\"select-room-number\">\n                  <SelectValue placeholder=\"Select room number\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {(availableRooms[watch(\"roomTypeId\")] || []).map((roomNumber: string) => (\n                    <SelectItem key={roomNumber} value={roomNumber}>\n                      Room {roomNumber}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              {errors.roomNumber && (\n                <p className=\"text-sm text-red-500 mt-1\">{errors.roomNumber.message}</p>\n              )}\n            </div>\n          )}\n\n          <div>\n            <Label htmlFor=\"expectedStayDays\">Expected Stay (days)</Label>\n            <Input\n              id=\"expectedStayDays\"\n              type=\"number\"\n              {...register(\"expectedStayDays\", { valueAsNumber: true })}\n              placeholder=\"Days\"\n              data-testid=\"input-expected-stay\"\n            />\n            {errors.expectedStayDays && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.expectedStayDays.message}</p>\n            )}\n          </div>\n\n          <div>\n            <Label htmlFor=\"checkinTime\">Check-in Date & Time</Label>\n            <Input\n              id=\"checkinTime\"\n              type=\"datetime-local\"\n              {...register(\"checkinTime\")}\n              data-testid=\"input-checkin-time\"\n            />\n            {errors.checkinTime && (\n              <p className=\"text-sm text-red-500 mt-1\">{errors.checkinTime.message}</p>\n            )}\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-4 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              className=\"flex-1\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              className=\"flex-1 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white\"\n              disabled={createCustomerMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {createCustomerMutation.isPending ? \"Adding...\" : \"Add Customer\"}\n            </Button>\n          </div>\n        </form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":18794},"client/src/components/assign-service-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { ServiceRequest } from \"@shared/types\";\n\ninterface AssignServiceModalProps {\n  request: ServiceRequest;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function AssignServiceModal({ request, isOpen, onClose }: AssignServiceModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [assignedTo, setAssignedTo] = useState(\"\");\n  const [timeFrame, setTimeFrame] = useState(\"\");\n\n  const assignMutation = useMutation({\n    mutationFn: async (data: { assignedTo: string; timeFrame: string }) => {\n      // Create admin service record\n      const adminServiceResponse = await apiRequest(\"POST\", \"/api/admin-services\", {\n        serviceRequestId: request.id,\n        requestType: request.service || request.type || \"Service Request\",\n        assignedTo: data.assignedTo,\n        timeFrame: data.timeFrame,\n        hotelId: request.hotelId,\n        service: true\n      });\n\n      // Update service request status\n      const updateResponse = await apiRequest(\"PUT\", `/api/service-requests/${request.id}`, {\n        status: \"assigned\",\n        assignedTo: data.assignedTo,\n        assignedBy: \"admin\",\n        assignedAt: new Date(),\n      });\n\n      return { adminService: await adminServiceResponse.json(), serviceRequest: await updateResponse.json() };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin-services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      toast({\n        title: \"Service Request Assigned\",\n        description: `Assigned to ${assignedTo} for ${timeFrame}`,\n      });\n      setAssignedTo(\"\");\n      setTimeFrame(\"\");\n      onClose();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to assign service request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!assignedTo.trim() || !timeFrame.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    assignMutation.mutate({ assignedTo: assignedTo.trim(), timeFrame: timeFrame.trim() });\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle>Assign Service Request</DialogTitle>\n          <DialogDescription>\n            Assign this service request to a staff member with a timeframe.\n          </DialogDescription>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"requestType\">Service Request</Label>\n            <Input\n              id=\"requestType\"\n              value={request.service || request.type || \"Service Request\"}\n              disabled\n              className=\"bg-gray-50\"\n              data-testid=\"input-request-type\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"customerName\">Customer Name</Label>\n            <Input\n              id=\"customerName\"\n              value={request.guestName || \"Not specified\"}\n              disabled\n              className=\"bg-gray-50\"\n              data-testid=\"input-customer-name\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"roomNumber\">Room Number</Label>\n            <Input\n              id=\"roomNumber\"\n              value={request.roomNumber}\n              disabled\n              className=\"bg-gray-50\"\n              data-testid=\"input-room-number\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"assignedTo\">Assign to Person</Label>\n            <Input\n              id=\"assignedTo\"\n              value={assignedTo}\n              onChange={(e) => setAssignedTo(e.target.value)}\n              placeholder=\"Enter staff member name\"\n              required\n              data-testid=\"input-assigned-to\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"timeFrame\">Time Frame</Label>\n            <Input\n              id=\"timeFrame\"\n              value={timeFrame}\n              onChange={(e) => setTimeFrame(e.target.value)}\n              placeholder=\"e.g., 30 minutes, 2 hours, by 3 PM\"\n              required\n              data-testid=\"input-time-frame\"\n            />\n          </div>\n          \n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={onClose}\n              data-testid=\"button-cancel\"\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={assignMutation.isPending}\n              data-testid=\"button-submit\"\n            >\n              {assignMutation.isPending ? \"Assigning...\" : \"Assign\"}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5572},"client/src/components/room-management-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Plus, QrCode } from \"lucide-react\";\nimport { RoomType } from \"@shared/types\";\n\ninterface RoomManagementModalProps {\n  trigger?: React.ReactNode;\n}\n\nexport default function RoomManagementModal({ trigger }: RoomManagementModalProps) {\n  const [open, setOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    roomNumber: \"\",\n    roomTypeId: \"\",\n    roomTypeName: \"\",\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: roomTypes = [] } = useQuery<RoomType[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  const generateRoomQRMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const response = await fetch(\"/api/generate-room-qr\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\", // Include cookies for authentication\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        let errorMessage = \"Failed to generate room QR code\";\n        try {\n          const error = await response.json();\n          errorMessage = error.message || errorMessage;\n        } catch {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Room QR code generated successfully\",\n      });\n      setOpen(false);\n      setFormData({ roomNumber: \"\", roomTypeId: \"\", roomTypeName: \"\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/rooms\"] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!formData.roomNumber || !formData.roomTypeId || !formData.roomTypeName) {\n      toast({\n        title: \"Error\",\n        description: \"Please fill in all fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateRoomQRMutation.mutate(formData);\n  };\n\n  const handleRoomTypeChange = (roomTypeId: string) => {\n    const selectedRoomType = roomTypes.find(rt => rt.id === roomTypeId);\n    setFormData({\n      ...formData,\n      roomTypeId,\n      roomTypeName: selectedRoomType?.name || \"\",\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button className=\"flex items-center space-x-2\">\n            <QrCode className=\"w-4 h-4\" />\n            <span>Generate Room QR Code</span>\n          </Button>\n        )}\n      </DialogTrigger>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center space-x-2\">\n            <QrCode className=\"w-5 h-5\" />\n            <span>Generate Room QR Code</span>\n          </DialogTitle>\n        </DialogHeader>\n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"roomNumber\">Room Number</Label>\n            <Input\n              id=\"roomNumber\"\n              value={formData.roomNumber}\n              onChange={(e) => setFormData({ ...formData, roomNumber: e.target.value })}\n              placeholder=\"Enter room number (e.g., 101, 205)\"\n              required\n            />\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"roomType\">Room Type</Label>\n            <Select value={formData.roomTypeId} onValueChange={handleRoomTypeChange} required>\n              <SelectTrigger>\n                <SelectValue placeholder=\"Select a room type\" />\n              </SelectTrigger>\n              <SelectContent>\n                {roomTypes.map((roomType) => (\n                  <SelectItem key={roomType.id} value={roomType.id}>\n                    {roomType.name} - ₹{roomType.price}/night\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <div className=\"flex justify-end space-x-2 pt-4\">\n            <Button\n              type=\"button\"\n              variant=\"outline\"\n              onClick={() => setOpen(false)}\n              disabled={generateRoomQRMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={generateRoomQRMutation.isPending}\n              className=\"flex items-center space-x-2\"\n            >\n              {generateRoomQRMutation.isPending ? (\n                <>\n                  <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\n                  <span>Generating...</span>\n                </>\n              ) : (\n                <>\n                  <Plus className=\"w-4 h-4\" />\n                  <span>Generate QR Code</span>\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":5617},"client/src/components/room-qr-display.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Download, QrCode, ExternalLink, RefreshCw } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface RoomQRCode {\n  roomNumber: string;\n  roomType: string;\n  qrCode: string;\n  qrCodeUrl: string;\n}\n\ninterface RoomQRDisplayProps {\n  hotelId?: string;\n}\n\nexport default function RoomQRDisplay({ hotelId }: RoomQRDisplayProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: roomQRCodes = [], isLoading } = useQuery<RoomQRCode[]>({\n    queryKey: [\"/api/qr-codes\", hotelId],\n    queryFn: async () => {\n      if (!hotelId) return [];\n      const response = await fetch(`/api/qr-codes/${hotelId}`);\n      if (!response.ok) throw new Error('Failed to fetch room QR codes');\n      return response.json();\n    },\n    enabled: !!hotelId,\n  });\n\n  const regenerateQRMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/regenerate-all-qr-codes', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include', // Include cookies for authentication\n      });\n\n      if (!response.ok) {\n        let errorMessage = 'Failed to regenerate QR codes';\n        try {\n          const error = await response.json();\n          errorMessage = error.message || errorMessage;\n        } catch {\n          errorMessage = `HTTP ${response.status}: ${response.statusText}`;\n        }\n        throw new Error(errorMessage);\n      }\n\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Success\",\n        description: `Regenerated QR codes for ${data.updatedCount} rooms to point to service app`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/qr-codes\", hotelId] });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const downloadQRCode = (roomNumber: string, qrCode: string) => {\n    try {\n      const link = document.createElement('a');\n      link.href = qrCode;\n      link.download = `room-${roomNumber}-qr-code.png`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({\n        title: \"Success\",\n        description: `QR code for Room ${roomNumber} downloaded`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to download QR code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n        {Array.from({ length: 6 }).map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardHeader>\n              <div className=\"h-6 bg-gray-200 rounded\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"w-full h-48 bg-gray-200 rounded mb-4\" />\n              <div className=\"h-4 bg-gray-200 rounded mb-2\" />\n              <div className=\"h-8 bg-gray-200 rounded\" />\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (roomQRCodes.length === 0) {\n    return (\n      <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-gray-50/30\">\n        <CardContent className=\"flex flex-col items-center justify-center py-16\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mb-6\">\n            <QrCode className=\"h-8 w-8 text-white\" />\n          </div>\n          <h3 className=\"text-xl font-semibold mb-3 text-gray-800\">No Room QR Codes Generated</h3>\n          <p className=\"text-gray-600 text-center max-w-md\">\n            Generate QR codes for your rooms so guests can easily access hotel services.\n          </p>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h3 className=\"text-lg font-semibold text-gray-800\">Room QR Codes</h3>\n        <Button\n          onClick={() => regenerateQRMutation.mutate()}\n          disabled={regenerateQRMutation.isPending}\n          className=\"flex items-center space-x-2\"\n          variant=\"outline\"\n        >\n          <RefreshCw className={`w-4 h-4 ${regenerateQRMutation.isPending ? 'animate-spin' : ''}`} />\n          <span>{regenerateQRMutation.isPending ? 'Updating...' : 'Update All QR Codes'}</span>\n        </Button>\n      </div>\n      \n      <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-3\">\n      {roomQRCodes.map((room) => (\n        <Card key={room.roomNumber} className=\"border-0 shadow-lg bg-gradient-to-br from-white to-purple-50/30 hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center space-x-2\">\n                <QrCode className=\"w-5 h-5 text-purple-600\" />\n                <span>Room {room.roomNumber}</span>\n              </CardTitle>\n              <Badge variant=\"outline\" className=\"bg-purple-50 text-purple-700\">\n                {room.roomType}\n              </Badge>\n            </div>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex justify-center p-4 bg-white rounded-lg shadow-inner\">\n              <img \n                src={room.qrCode} \n                alt={`QR Code for Room ${room.roomNumber}`}\n                className=\"w-48 h-48 object-contain\"\n              />\n            </div>\n            \n            <div className=\"space-y-2\">\n              <p className=\"text-sm text-gray-600 break-all\">\n                <strong>URL:</strong> {room.qrCodeUrl}\n              </p>\n            </div>\n\n            <div className=\"flex space-x-2\">\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"flex-1 flex items-center space-x-2\"\n                onClick={() => downloadQRCode(room.roomNumber, room.qrCode)}\n              >\n                <Download className=\"w-4 h-4\" />\n                <span>Download</span>\n              </Button>\n              <Button\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"flex-1 flex items-center space-x-2\"\n                onClick={() => window.open(room.qrCodeUrl, '_blank')}\n              >\n                <ExternalLink className=\"w-4 h-4\" />\n                <span>Test</span>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n      </div>\n    </div>\n  );\n}","size_bytes":6901},"client/src/components/service-request-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Wrench, \n  Users, \n  Utensils, \n  Sparkles, \n  HeadphonesIcon, \n  MoreHorizontal \n} from \"lucide-react\";\nimport { ServiceRequest } from \"@shared/types\";\nimport { formatDistanceToNow } from \"date-fns\";\n\n// Safe date formatting function\nconst safeFormatDistanceToNow = (dateValue: any, options?: any) => {\n  try {\n    const date = new Date(dateValue);\n    if (isNaN(date.getTime())) {\n      return \"Invalid date\";\n    }\n    return formatDistanceToNow(date, options);\n  } catch (error) {\n    return \"Invalid date\";\n  }\n};\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport AssignServiceModal from \"./assign-service-modal\";\n\ninterface ServiceRequestCardProps {\n  request: ServiceRequest;\n}\n\nconst getRequestIcon = (type: string) => {\n  switch (type) {\n    case \"maintenance\":\n      return Wrench;\n    case \"room_service\":\n      return Users;\n    case \"food_delivery\":\n      return Utensils;\n    case \"housekeeping\":\n      return Sparkles;\n    case \"concierge\":\n      return HeadphonesIcon;\n    default:\n      return MoreHorizontal;\n  }\n};\n\nconst getRequestIconColor = (type: string) => {\n  switch (type) {\n    case \"maintenance\":\n      return \"text-amber-600 bg-amber-100\";\n    case \"room_service\":\n      return \"text-blue-600 bg-blue-100\";\n    case \"food_delivery\":\n      return \"text-green-600 bg-green-100\";\n    case \"housekeeping\":\n      return \"text-purple-600 bg-purple-100\";\n    case \"concierge\":\n      return \"text-pink-600 bg-pink-100\";\n    default:\n      return \"text-gray-600 bg-gray-100\";\n  }\n};\n\nconst getStatusColor = (status: string) => {\n  switch (status) {\n    case \"pending\":\n      return \"bg-yellow-100 text-yellow-800\";\n    case \"assigned\":\n      return \"bg-blue-100 text-blue-800\";\n    case \"in_progress\":\n      return \"bg-purple-100 text-purple-800\";\n    case \"completed\":\n      return \"bg-green-100 text-green-800\";\n    case \"cancelled\":\n      return \"bg-red-100 text-red-800\";\n    default:\n      return \"bg-gray-100 text-gray-800\";\n  }\n};\n\nexport default function ServiceRequestCard({ request }: ServiceRequestCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showAssignModal, setShowAssignModal] = useState(false);\n  const Icon = getRequestIcon(request.type || 'other');\n\n  const updateRequestMutation = useMutation({\n    mutationFn: async (data: { status?: string; assignedTo?: string; assignedBy?: string; completedBy?: string; assignedAt?: Date; completedAt?: Date }) => {\n      const response = await apiRequest(\"PUT\", `/api/service-requests/${request.id}`, data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update service request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAssign = () => {\n    setShowAssignModal(true);\n  };\n\n  const completeRequestMutation = useMutation({\n    mutationFn: async () => {\n      // Update service request to completed\n      const serviceResponse = await apiRequest(\"PUT\", `/api/service-requests/${request.id}`, {\n        status: \"completed\",\n        completedBy: request.assignedTo || \"admin\",\n        completedAt: new Date(),\n      });\n      \n      // Try to update admin service to mark service: false (completion)\n      // This may fail if no admin service exists, which is okay\n      try {\n        const adminResponse = await apiRequest(\"PUT\", `/api/admin-services/${request.id}`, {\n          service: false,\n          completedAt: new Date(),\n        });\n      } catch (error) {\n        console.log(\"No admin service found for completion, continuing...\");\n      }\n      \n      return { serviceResponse };\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/service-requests\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin-services\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      toast({\n        title: \"Service Request Completed\",\n        description: \"Request marked as completed\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to complete service request\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleComplete = () => {\n    completeRequestMutation.mutate();\n  };\n\n  return (\n    <Card className=\"hover:border-gray-300 transition-colors\">\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-4\">\n          <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${getRequestIconColor(request.type || 'other')}`}>\n            <Icon className=\"w-5 h-5\" />\n          </div>\n          \n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 \n                className=\"text-sm font-semibold text-gray-900 capitalize\"\n                data-testid={`text-request-type-${request.id}`}\n              >\n                {request.service || request.type?.replace('_', ' ') || 'Service Request'}\n              </h4>\n              <div className=\"flex items-center space-x-2\">\n                <Badge \n                  variant=\"secondary\" \n                  className={getStatusColor(request.status)}\n                  data-testid={`badge-status-${request.id}`}\n                >\n                  {request.status}\n                </Badge>\n                <span \n                  className=\"text-xs text-gray-500\"\n                  data-testid={`text-request-time-${request.id}`}\n                >\n                  {safeFormatDistanceToNow(request.requestedAt, { addSuffix: true })}\n                </span>\n              </div>\n            </div>\n            \n            <p \n              className=\"text-sm text-gray-600 mb-3\"\n              data-testid={`text-request-description-${request.id}`}\n            >\n              {request.notes || request.description || 'No details provided'}\n            </p>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2 text-xs text-gray-500\">\n                <span>Room:</span>\n                <span \n                  className=\"font-medium\"\n                  data-testid={`text-room-number-${request.id}`}\n                >\n                  {request.roomNumber}\n                </span>\n                {request.guestName && (\n                  <>\n                    <span>•</span>\n                    <span data-testid={`text-guest-name-${request.id}`}>\n                      Guest: {request.guestName}\n                    </span>\n                  </>\n                )}\n                {request.assignedTo && (\n                  <>\n                    <span>•</span>\n                    <span data-testid={`text-assigned-to-${request.id}`}>\n                      Assigned to {request.assignedTo}\n                    </span>\n                  </>\n                )}\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                {request.status === \"pending\" && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleAssign}\n                    disabled={updateRequestMutation.isPending}\n                    className=\"text-blue-500 hover:text-blue-600 text-xs\"\n                    data-testid={`button-assign-${request.id}`}\n                  >\n                    Assign\n                  </Button>\n                )}\n                \n                {(request.status === \"pending\" || request.status === \"assigned\" || request.status === \"in_progress\") && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={handleComplete}\n                    disabled={completeRequestMutation.isPending}\n                    className=\"text-green-500 hover:text-green-600 text-xs\"\n                    data-testid={`button-complete-${request.id}`}\n                  >\n                    {completeRequestMutation.isPending ? \"Completing...\" : \"Complete\"}\n                  </Button>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n      \n      <AssignServiceModal\n        request={request}\n        isOpen={showAssignModal}\n        onClose={() => setShowAssignModal(false)}\n      />\n    </Card>\n  );\n}\n","size_bytes":8891},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { User as UserType } from \"@shared/types\";\nimport { \n  LayoutDashboard, \n  Users, \n  Bed, \n  Bell, \n  BarChart3, \n  FileText, \n  Hotel, \n  LogOut,\n  User\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface SidebarProps {\n  hotelName?: string;\n  pendingRequestsCount?: number;\n}\n\nexport default function Sidebar({ hotelName = \"Hotel\", pendingRequestsCount = 0 }: SidebarProps) {\n  const [location] = useLocation();\n  const { user } = useAuth() as { user: UserType | undefined, isLoading: boolean, isAuthenticated: boolean };\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n    { name: \"Customers\", href: \"/customers\", icon: Users },\n    { name: \"Rooms\", href: \"/rooms\", icon: Bed },\n    { name: \"Service Requests\", href: \"/service-requests\", icon: Bell, badge: pendingRequestsCount },\n    { name: \"Reports\", href: \"/reports\", icon: FileText },\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-b from-white to-gray-50/50 w-64 min-h-screen shadow-xl border-r border-gray-100 flex flex-col\">\n      {/* Logo Section */}\n      <div className=\"p-6 border-b border-gray-100\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n            <Hotel className=\"text-white text-xl\" />\n          </div>\n          <div>\n            <h1 className=\"text-xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">HotelAdmin</h1>\n            <p className=\"text-sm text-gray-600\" data-testid=\"text-hotel-name\">{hotelName}</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Menu */}\n      <nav className=\"flex-1 px-4 py-6\">\n        <ul className=\"space-y-3\">\n          {navigation.map((item) => {\n            const Icon = item.icon;\n            const isActive = location === item.href;\n            \n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <div\n                    className={cn(\n                      \"flex items-center px-4 py-3 text-sm font-medium rounded-xl transition-all duration-200 cursor-pointer\",\n                      isActive\n                        ? \"bg-gradient-to-r from-blue-500 to-purple-600 text-white shadow-lg transform scale-105\"\n                        : \"text-gray-700 hover:bg-gradient-to-r hover:from-gray-50 hover:to-blue-50 hover:shadow-md\"\n                    )}\n                    data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <Icon className=\"w-5 h-5 mr-3\" />\n                    {item.name}\n                    {item.badge && item.badge > 0 && (\n                      <span \n                        className=\"ml-auto bg-gradient-to-r from-red-500 to-red-600 text-white text-xs px-2 py-1 rounded-full shadow-sm animate-pulse\"\n                        data-testid={`badge-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        {item.badge}\n                      </span>\n                    )}\n                  </div>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n\n      {/* User Profile Section */}\n      <div className=\"p-4 border-t border-gray-100 bg-gradient-to-r from-gray-50/50 to-blue-50/30\">\n        <div className=\"flex items-center space-x-3 p-3 rounded-xl bg-white/60 backdrop-blur-sm border border-white/50 hover:bg-white/80 transition-all duration-200\">\n          <Avatar className=\"w-11 h-11 shadow-md\">\n            <AvatarImage src={user?.profileImageUrl || undefined} />\n            <AvatarFallback className=\"bg-gradient-to-br from-blue-500 to-purple-600 text-white\">\n              <User className=\"w-5 h-5\" />\n            </AvatarFallback>\n          </Avatar>\n          <div className=\"flex-1\">\n            <p className=\"text-sm font-semibold text-gray-900\" data-testid=\"text-user-name\">\n              {user?.firstName && user?.lastName \n                ? `${user.firstName} ${user.lastName}` \n                : user?.email || 'Hotel Owner'}\n            </p>\n            <p className=\"text-xs text-gray-600\">Hotel Owner</p>\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => {\n              window.location.href = '/logout.html';\n            }}\n            className=\"text-gray-500 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4909},"client/src/components/stats-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, Bed, Bell, DollarSign, TrendingUp, AlertTriangle } from \"lucide-react\";\n\ninterface StatsCardsProps {\n  stats: {\n    totalCustomers: number;\n    activeCustomers: number;\n    pendingRequests: number;\n    occupancyRate: number;\n    totalRevenue: number;\n  };\n  totalRooms?: number;\n}\n\nexport default function StatsCards({ stats, totalRooms = 20 }: StatsCardsProps) {\n  // Only show growth indicators if we have meaningful historical data\n  const showGrowthIndicators = stats.totalCustomers > 10; // Show growth only after some activity\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {/* Total Customers */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 mb-1\">Total Customers</p>\n              <p \n                className=\"text-3xl font-bold text-gray-900\"\n                data-testid=\"stat-total-customers\"\n              >\n                {stats.totalCustomers}\n              </p>\n              {showGrowthIndicators ? (\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  <span>Growth tracking available after more bookings</span>\n                </p>\n              ) : (\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  <span>New hotel - building customer base</span>\n                </p>\n              )}\n            </div>\n            <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n              <Users className=\"text-blue-600 text-xl\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Occupied Rooms */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 mb-1\">Occupied Rooms</p>\n              <p \n                className=\"text-3xl font-bold text-gray-900\"\n                data-testid=\"stat-occupied-rooms\"\n              >\n                {stats.activeCustomers}/{totalRooms}\n              </p>\n              <p className=\"text-sm text-amber-600 mt-2\">\n                <span data-testid=\"stat-occupancy-rate\">{stats.occupancyRate}% occupancy rate</span>\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <Bed className=\"text-green-600 text-xl\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Pending Requests */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 mb-1\">Pending Requests</p>\n              <p \n                className=\"text-3xl font-bold text-gray-900\"\n                data-testid=\"stat-pending-requests\"\n              >\n                {stats.pendingRequests}\n              </p>\n              <p className=\"text-sm text-red-600 mt-2\">\n                <AlertTriangle className=\"w-4 h-4 inline mr-1\" />\n                <span>Requires attention</span>\n              </p>\n            </div>\n            <div className=\"w-12 h-12 bg-amber-100 rounded-lg flex items-center justify-center\">\n              <Bell className=\"text-amber-600 text-xl\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Total Revenue */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 mb-1\">Total Revenue</p>\n              <p \n                className=\"text-3xl font-bold text-gray-900\"\n                data-testid=\"stat-total-revenue\"\n              >\n                ₹{stats.totalRevenue.toLocaleString()}\n              </p>\n              {showGrowthIndicators ? (\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  <span>Growth tracking available after more bookings</span>\n                </p>\n              ) : (\n                <p className=\"text-sm text-gray-500 mt-2\">\n                  <span>Revenue from {stats.totalCustomers} bookings</span>\n                </p>\n              )}\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <DollarSign className=\"text-yellow-600 text-xl\" />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4642},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    queryFn: async () => {\n      const res = await fetch(\"/api/auth/user\", {\n        credentials: \"include\",\n      });\n      \n      if (res.status === 401) {\n        return null; // Return null for unauthenticated users\n      }\n      \n      if (!res.ok) {\n        throw new Error(`${res.status}: ${res.statusText}`);\n      }\n      \n      return await res.json();\n    },\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":627},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Plus, Search, User, Phone, Mail, Bed, Calendar, MoreHorizontal, LogOut, QrCode } from \"lucide-react\";\nimport { Customer } from \"@shared/types\";\nimport { formatDistanceToNow, format } from \"date-fns\";\n\n// Safe date formatting functions\nconst safeFormat = (dateValue: any, formatString: string) => {\n  try {\n    const date = new Date(dateValue);\n    if (isNaN(date.getTime())) {\n      return \"Invalid date\";\n    }\n    return format(date, formatString);\n  } catch (error) {\n    return \"Invalid date\";\n  }\n};\n\nconst safeFormatDistanceToNow = (dateValue: any, options?: any) => {\n  try {\n    const date = new Date(dateValue);\n    if (isNaN(date.getTime())) {\n      return \"Invalid date\";\n    }\n    return formatDistanceToNow(date, options);\n  } catch (error) {\n    return \"Invalid date\";\n  }\n};\nimport AddCustomerModal from \"@/components/add-customer-modal\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Customers() {\n  const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: async (customerId: string) => {\n      const response = await apiRequest(\"PUT\", `/api/customers/${customerId}`, {\n        isActive: false,\n        checkoutTime: new Date().toISOString(),\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Customer checked out successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to check out customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCustomers = customers.filter(customer =>\n    customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.roomNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    customer.phone.includes(searchTerm)\n  );\n\n  const activeCustomers = filteredCustomers.filter(customer => customer.isActive);\n  const checkedOutCustomers = filteredCustomers.filter(customer => !customer.isActive);\n\n  const calculateStayDuration = (checkinTime: string, checkoutTime?: string) => {\n    try {\n      const checkin = new Date(checkinTime);\n      const checkout = checkoutTime ? new Date(checkoutTime) : new Date();\n      \n      // Check if dates are valid\n      if (isNaN(checkin.getTime()) || isNaN(checkout.getTime())) {\n        return \"Invalid date\";\n      }\n      \n      const diffInMs = checkout.getTime() - checkin.getTime();\n      const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));\n      const diffInHours = Math.floor((diffInMs % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      \n      if (diffInDays > 0) {\n        return `${diffInDays} day${diffInDays > 1 ? 's' : ''} ${diffInHours}h`;\n      }\n      return `${diffInHours} hour${diffInHours > 1 ? 's' : ''}`;\n    } catch (error) {\n      return \"Invalid date\";\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-white to-green-50/50 shadow-sm border-b border-gray-100 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">Customer Management</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Manage guest check-ins, check-outs, and stay information</p>\n          </div>\n          <Button \n            onClick={() => setShowAddCustomerModal(true)}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-add-customer\"\n          >\n            <Plus className=\"w-4 h-4\" />\n            <span>Add Customer</span>\n          </Button>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50/30 to-green-50/20\">\n        {/* Search and Filters */}\n        <Card className=\"mb-8 border-0 shadow-lg bg-gradient-to-r from-white to-gray-50/50\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                <Input\n                  placeholder=\"Search customers by name, room, or phone...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                  data-testid=\"input-search-customers\"\n                />\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-sm\" data-testid=\"badge-total-customers\">\n                  Total: {customers.length}\n                </Badge>\n                <Badge className=\"bg-gradient-to-r from-green-500 to-green-600 text-white shadow-sm\" data-testid=\"badge-active-customers\">\n                  Active: {activeCustomers.length}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Active Customers */}\n        <Card className=\"mb-8 border-0 shadow-lg bg-gradient-to-br from-white to-green-50/30 hover:shadow-xl transition-all duration-300\">\n          <CardHeader className=\"pb-4\">\n            <CardTitle className=\"flex items-center space-x-3 text-xl font-semibold text-gray-800\">\n              <div className=\"w-8 h-8 bg-gradient-to-br from-green-500 to-green-600 rounded-lg flex items-center justify-center\">\n                <User className=\"w-4 h-4 text-white\" />\n              </div>\n              <span>Active Guests</span>\n              <Badge className=\"bg-gradient-to-r from-green-500 to-green-600 text-white shadow-sm\">\n                {activeCustomers.length}\n              </Badge>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading customers...</div>\n            ) : activeCustomers.length === 0 ? (\n              <div className=\"text-center py-8 text-gray-500\">\n                No active customers found\n              </div>\n            ) : (\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Guest</TableHead>\n                      <TableHead>Room</TableHead>\n                      <TableHead>Check-in</TableHead>\n                      <TableHead>Duration</TableHead>\n                      <TableHead>Expected Stay</TableHead>\n                      <TableHead>Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {activeCustomers.map((customer) => (\n                      <TableRow key={customer.id} data-testid={`row-customer-${customer.id}`} className=\"hover:bg-green-50/50 transition-colors\">\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar>\n                              <AvatarFallback>\n                                <User className=\"w-4 h-4\" />\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\" data-testid={`text-name-${customer.id}`}>\n                                {customer.name}\n                              </p>\n                              <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n                                <Phone className=\"w-3 h-3\" />\n                                <span data-testid={`text-phone-${customer.id}`}>{customer.phone}</span>\n                                {customer.email && (\n                                  <>\n                                    <Mail className=\"w-3 h-3 ml-2\" />\n                                    <span data-testid={`text-email-${customer.id}`}>{customer.email}</span>\n                                  </>\n                                )}\n                              </div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <Bed className=\"w-4 h-4 text-gray-400\" />\n                            <span data-testid={`text-room-${customer.id}`}>{customer.roomNumber}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-1\">\n                            <Calendar className=\"w-4 h-4 text-gray-400\" />\n                            <div>\n                              <p className=\"text-sm\" data-testid={`text-checkin-date-${customer.id}`}>\n                                {safeFormat(customer.checkinTime!, \"MMM dd, yyyy\")}\n                              </p>\n                              <p className=\"text-xs text-gray-500\" data-testid={`text-checkin-time-${customer.id}`}>\n                                {safeFormat(customer.checkinTime!, \"h:mm a\")}\n                              </p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell data-testid={`text-duration-${customer.id}`}>\n                          {calculateStayDuration(customer.checkinTime!.toString())}\n                        </TableCell>\n                        <TableCell data-testid={`text-expected-stay-${customer.id}`}>\n                          {customer.expectedStayDays ? `${customer.expectedStayDays} days` : \"Not specified\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            {customer.qrCode && (\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  // Create a popup window to show QR code\n                                  const qrWindow = window.open('', '_blank', 'width=400,height=600');\n                                  if (qrWindow) {\n                                    qrWindow.document.write(`\n                                      <html>\n                                        <head><title>QR Code - ${customer.name} (Room ${customer.roomNumber})</title></head>\n                                        <body style=\"font-family: Arial, sans-serif; text-align: center; padding: 20px;\">\n                                          <h2>Hotel Service QR Code</h2>\n                                          <p><strong>${customer.name}</strong> - Room ${customer.roomNumber}</p>\n                                          <img src=\"${customer.qrCode}\" style=\"max-width: 300px; border: 2px solid #ccc; padding: 10px; background: white;\" />\n                                          <p style=\"color: #666; margin-top: 20px;\">Scan to access hotel services</p>\n                                          <button onclick=\"window.print()\" style=\"padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 4px; cursor: pointer;\">Print QR Code</button>\n                                        </body>\n                                      </html>\n                                    `);\n                                    qrWindow.document.close();\n                                  }\n                                }}\n                                className=\"text-blue-600 hover:text-blue-700\"\n                                data-testid={`button-qr-${customer.id}`}\n                              >\n                                <QrCode className=\"w-4 h-4 mr-1\" />\n                                QR Code\n                              </Button>\n                            )}\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() => checkoutMutation.mutate(customer.id)}\n                              disabled={checkoutMutation.isPending}\n                              className=\"text-red-600 hover:text-red-700\"\n                              data-testid={`button-checkout-${customer.id}`}\n                            >\n                              <LogOut className=\"w-4 h-4 mr-1\" />\n                              Check Out\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Recent Check-outs */}\n        {checkedOutCustomers.length > 0 && (\n          <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-gray-50/30 hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"pb-4\">\n              <CardTitle className=\"flex items-center space-x-3 text-xl font-semibold text-gray-800\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-gray-500 to-gray-600 rounded-lg flex items-center justify-center\">\n                  <LogOut className=\"w-4 h-4 text-white\" />\n                </div>\n                <span>Recent Check-outs</span>\n                <Badge className=\"bg-gradient-to-r from-gray-500 to-gray-600 text-white shadow-sm\">\n                  {checkedOutCustomers.length}\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Guest</TableHead>\n                      <TableHead>Room</TableHead>\n                      <TableHead>Check-in</TableHead>\n                      <TableHead>Check-out</TableHead>\n                      <TableHead>Total Stay</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {checkedOutCustomers.slice(0, 10).map((customer) => (\n                      <TableRow key={customer.id} data-testid={`row-checkout-${customer.id}`} className=\"hover:bg-gray-50/50 transition-colors\">\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar>\n                              <AvatarFallback>\n                                <User className=\"w-4 h-4\" />\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium\">{customer.name}</p>\n                              <p className=\"text-sm text-gray-500\">{customer.phone}</p>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>{customer.roomNumber}</TableCell>\n                        <TableCell>\n                          {safeFormat(customer.checkinTime!, \"MMM dd, h:mm a\")}\n                        </TableCell>\n                        <TableCell>\n                          {customer.checkoutTime && safeFormat(customer.checkoutTime, \"MMM dd, h:mm a\")}\n                        </TableCell>\n                        <TableCell>\n                          {calculateStayDuration(customer.checkinTime!.toString(), customer.checkoutTime?.toString())}\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </main>\n\n      {/* Add Customer Modal */}\n      <AddCustomerModal \n        open={showAddCustomerModal} \n        onOpenChange={setShowAddCustomerModal} \n      />\n    </div>\n  );\n}\n","size_bytes":17109},"client/src/pages/dashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Plus, Bell, CalendarCheck, ThumbsUp, Clock, User } from \"lucide-react\";\nimport StatsCards from \"@/components/stats-cards\";\nimport AddCustomerModal from \"@/components/add-customer-modal\";\nimport ServiceRequestCard from \"@/components/service-request-card\";\nimport { Customer, ServiceRequest, Hotel } from \"@shared/types\";\nimport { formatDistanceToNow } from \"date-fns\";\n\n// Safe date formatting function\nconst safeFormatDistanceToNow = (dateValue: any, options?: any) => {\n  try {\n    const date = new Date(dateValue);\n    if (isNaN(date.getTime())) {\n      return \"Invalid date\";\n    }\n    return formatDistanceToNow(date, options);\n  } catch (error) {\n    return \"Invalid date\";\n  }\n};\n\ninterface HotelStats {\n  totalCustomers: number;\n  activeCustomers: number;\n  pendingRequests: number;\n  occupancyRate: number;\n  totalRevenue: number;\n}\n\nexport default function Dashboard() {\n  const [showAddCustomerModal, setShowAddCustomerModal] = useState(false);\n  const [socket, setSocket] = useState<WebSocket | null>(null);\n  const [, setLocation] = useLocation();\n\n  // Fetch data\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: serviceRequests = [] } = useQuery<ServiceRequest[]>({\n    queryKey: [\"/api/service-requests\"],\n  });\n\n  const { data: stats } = useQuery<HotelStats>({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const { data: hotel } = useQuery<Hotel>({\n    queryKey: [\"/api/hotel\"],\n  });\n\n  // WebSocket connection for real-time updates (development only)\n  useEffect(() => {\n    // Skip WebSocket connection in production/serverless environments\n    if (hotel?.id && window.location.hostname === 'localhost') {\n      try {\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        const ws = new WebSocket(wsUrl);\n\n        ws.onopen = () => {\n          ws.send(JSON.stringify({ type: 'join_hotel', hotelId: hotel.id }));\n        };\n\n        ws.onmessage = (event) => {\n          const data = JSON.parse(event.data);\n          // Handle real-time updates here\n          console.log('Real-time update:', data);\n        };\n\n        ws.onerror = (error) => {\n          console.log('WebSocket connection failed (development only):', error);\n        };\n\n        setSocket(ws);\n\n        return () => {\n          ws.close();\n        };\n      } catch (error) {\n        console.log('WebSocket not available in this environment');\n      }\n    }\n  }, [hotel?.id]);\n\n  const recentCustomers = customers.filter(customer => customer.isActive).slice(0, 3);\n  const pendingRequests = serviceRequests.filter(req => req.status === \"pending\").slice(0, 3);\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-white to-blue-50/50 shadow-sm border-b border-gray-100 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">Dashboard</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Welcome back! Here's what's happening at your hotel today</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            {/* Notification Bell */}\n            <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n              <Bell className=\"text-xl\" />\n              {(stats?.pendingRequests || 0) > 0 && (\n                <span \n                  className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center\"\n                  data-testid=\"badge-notifications\"\n                >\n                  {stats?.pendingRequests || 0}\n                </span>\n              )}\n            </Button>\n            \n            {/* Add Customer Button */}\n            <Button \n              onClick={() => setShowAddCustomerModal(true)}\n              className=\"flex items-center space-x-2\"\n              data-testid=\"button-add-customer\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              <span>Add Customer</span>\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50/30 to-blue-50/20\">\n        {/* Stats Cards */}\n        {stats && (\n          <div className=\"mb-8\">\n            <StatsCards \n              stats={stats} \n              totalRooms={hotel?.totalRooms || 20} \n            />\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Customers */}\n          <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-blue-50/30 hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-4\">\n              <CardTitle className=\"text-xl font-semibold text-gray-800 flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                  <User className=\"w-4 h-4 text-white\" />\n                </div>\n                <span>Recent Check-ins</span>\n              </CardTitle>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                onClick={() => setLocation(\"/customers\")}\n                data-testid=\"button-view-all-customers\"\n              >\n                View All\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {recentCustomers.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-4\">No recent check-ins</p>\n                ) : (\n                  recentCustomers.map((customer) => (\n                    <div \n                      key={customer.id} \n                      className=\"flex items-center space-x-4 p-4 rounded-xl bg-white/60 backdrop-blur-sm border border-white/50 hover:bg-white/80 hover:shadow-md transition-all duration-200 cursor-pointer\"\n                      data-testid={`customer-row-${customer.id}`}\n                    >\n                      <Avatar>\n                        <AvatarFallback>\n                          <User className=\"w-5 h-5 text-gray-600\" />\n                        </AvatarFallback>\n                      </Avatar>\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center justify-between\">\n                          <div>\n                            <p \n                              className=\"font-medium text-gray-900\"\n                              data-testid={`text-customer-name-${customer.id}`}\n                            >\n                              {customer.name}\n                            </p>\n                            <p \n                              className=\"text-sm text-gray-500\"\n                              data-testid={`text-customer-phone-${customer.id}`}\n                            >\n                              {customer.phone}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p \n                              className=\"text-sm font-medium\"\n                              data-testid={`text-room-${customer.id}`}\n                            >\n                              Room {customer.roomNumber}\n                            </p>\n                            <p \n                              className=\"text-xs text-gray-500\"\n                              data-testid={`text-checkin-time-${customer.id}`}\n                            >\n                              {safeFormatDistanceToNow(customer.checkinTime, { addSuffix: true })}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-gradient-to-r from-green-500 to-green-600 text-white shadow-sm\">\n                        Active\n                      </Badge>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Service Requests */}\n          <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-orange-50/30 hover:shadow-xl transition-all duration-300\">\n            <CardHeader className=\"flex flex-row items-center justify-between pb-4\">\n              <CardTitle className=\"text-xl font-semibold text-gray-800 flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-orange-500 to-red-600 rounded-lg flex items-center justify-center\">\n                  <Bell className=\"w-4 h-4 text-white\" />\n                </div>\n                <span>Pending Service Requests</span>\n              </CardTitle>\n              <Badge \n                className=\"bg-gradient-to-r from-red-500 to-red-600 text-white shadow-sm\"\n                data-testid=\"badge-pending-count\"\n              >\n                {stats?.pendingRequests || 0} Pending\n              </Badge>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4 max-h-96 overflow-y-auto pr-2 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100\">\n                {pendingRequests.length === 0 ? (\n                  <p className=\"text-gray-500 text-center py-4\">No pending requests</p>\n                ) : (\n                  pendingRequests.map((request) => (\n                    <ServiceRequestCard key={request.id} request={request} />\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n\n      </main>\n\n      {/* Add Customer Modal */}\n      <AddCustomerModal \n        open={showAddCustomerModal} \n        onOpenChange={setShowAddCustomerModal} \n      />\n    </div>\n  );\n}\n","size_bytes":10478},"client/src/pages/hotel-setup.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { insertHotelSchema } from \"@shared/types\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { z } from \"zod\";\nimport { Hotel } from \"lucide-react\";\n\nconst formSchema = insertHotelSchema;\ntype FormData = z.infer<typeof formSchema>;\n\nexport default function HotelSetup() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      totalRooms: 50,\n    },\n  });\n\n  const createHotelMutation = useMutation({\n    mutationFn: async (data: FormData) => {\n      const response = await apiRequest(\"POST\", \"/api/hotel\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Hotel setup completed successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/hotel\"] });\n      // Page will automatically redirect once hotel is created\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create hotel. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    createHotelMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-blue-500 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <Hotel className=\"text-white text-2xl\" />\n          </div>\n          <CardTitle className=\"text-2xl\">Setup Your Hotel</CardTitle>\n          <p className=\"text-gray-600\">\n            Let's get started by setting up your hotel information\n          </p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"name\">Hotel Name</Label>\n              <Input\n                id=\"name\"\n                {...register(\"name\")}\n                placeholder=\"Enter your hotel name\"\n                data-testid=\"input-hotel-name\"\n              />\n              {errors.name && (\n                <p className=\"text-sm text-red-500 mt-1\">{errors.name.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"address\">Address</Label>\n              <Textarea\n                id=\"address\"\n                {...register(\"address\")}\n                placeholder=\"Enter hotel address\"\n                data-testid=\"input-hotel-address\"\n              />\n              {errors.address && (\n                <p className=\"text-sm text-red-500 mt-1\">{errors.address.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"phone\">Phone Number</Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                {...register(\"phone\")}\n                placeholder=\"Enter phone number\"\n                data-testid=\"input-hotel-phone\"\n              />\n              {errors.phone && (\n                <p className=\"text-sm text-red-500 mt-1\">{errors.phone.message}</p>\n              )}\n            </div>\n\n            <div>\n              <Label htmlFor=\"totalRooms\">Total Number of Rooms</Label>\n              <Input\n                id=\"totalRooms\"\n                type=\"number\"\n                {...register(\"totalRooms\", { valueAsNumber: true })}\n                placeholder=\"Number of rooms\"\n                data-testid=\"input-total-rooms\"\n              />\n              {errors.totalRooms && (\n                <p className=\"text-sm text-red-500 mt-1\">{errors.totalRooms.message}</p>\n              )}\n            </div>\n\n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={createHotelMutation.isPending}\n              data-testid=\"button-create-hotel\"\n            >\n              {createHotelMutation.isPending ? \"Creating...\" : \"Create Hotel\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4734},"client/src/pages/landing.tsx":{"content":"import { LoginForm } from \"@/components/LoginForm\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { Hotel, Star, Shield, Users } from \"lucide-react\";\n\nexport default function Landing() {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect to dashboard if already authenticated\n  useEffect(() => {\n    if (!isLoading && user) {\n      setLocation(\"/dashboard\");\n    }\n  }, [user, isLoading, setLocation]);\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <Hotel className=\"w-16 h-16 text-blue-500 mx-auto mb-4 animate-pulse\" />\n          <p className=\"text-gray-600\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Don't render if user is authenticated (will redirect)\n  if (user) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100 relative overflow-hidden\">\n      {/* Background decorative elements */}\n      <div className=\"absolute inset-0 overflow-hidden\">\n        <div className=\"absolute top-10 left-10 w-20 h-20 bg-blue-200/30 rounded-full blur-xl animate-pulse\"></div>\n        <div className=\"absolute top-40 right-20 w-32 h-32 bg-purple-200/30 rounded-full blur-xl animate-pulse delay-1000\"></div>\n        <div className=\"absolute bottom-20 left-1/4 w-24 h-24 bg-indigo-200/30 rounded-full blur-xl animate-pulse delay-500\"></div>\n      </div>\n\n      {/* Header */}\n      <header className=\"relative z-10 px-6 py-8\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg\">\n              <Hotel className=\"text-white text-xl\" />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent\">\n                HotelAdmin Pro\n              </h1>\n              <p className=\"text-sm text-gray-600\">Professional Hotel Management</p>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"relative z-10 flex items-center justify-center min-h-[calc(100vh-120px)] px-6\">\n        <div className=\"max-w-6xl mx-auto grid lg:grid-cols-2 gap-12 items-center\">\n          {/* Left side - Hero content */}\n          <div className=\"space-y-8\">\n            <div className=\"space-y-4\">\n              <h2 className=\"text-4xl lg:text-5xl font-bold text-gray-900 leading-tight\">\n                Manage Your\n                <span className=\"bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent block\">\n                  Hotel Operations\n                </span>\n                Effortlessly\n              </h2>\n              <p className=\"text-xl text-gray-600 leading-relaxed\">\n                Streamline customer management, room bookings, and service requests with our comprehensive hotel management platform.\n              </p>\n            </div>\n\n            {/* Features */}\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\n              <div className=\"flex items-center space-x-3 p-4 bg-white/60 backdrop-blur-sm rounded-xl border border-white/20\">\n                <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Users className=\"w-5 h-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Customer Management</p>\n                  <p className=\"text-xs text-gray-600\">Easy check-ins & outs</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-4 bg-white/60 backdrop-blur-sm rounded-xl border border-white/20\">\n                <div className=\"w-10 h-10 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Star className=\"w-5 h-5 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Service Requests</p>\n                  <p className=\"text-xs text-gray-600\">Track all requests</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-3 p-4 bg-white/60 backdrop-blur-sm rounded-xl border border-white/20\">\n                <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <Shield className=\"w-5 h-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"font-semibold text-gray-900\">Secure & Reliable</p>\n                  <p className=\"text-xs text-gray-600\">Data protection</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Right side - Login form */}\n          <div className=\"flex justify-center lg:justify-end\">\n            <div className=\"w-full max-w-md\">\n              <LoginForm />\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":5381},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  LineChart,\n  Line\n} from \"recharts\";\nimport { \n  Bed, \n  Users, \n  Clock, \n  TrendingUp, \n  Award, \n  Activity,\n  DollarSign,\n  BarChart3\n} from \"lucide-react\";\n\nexport default function Reports() {\n  // Fetch analytics data\n  const { data: roomAnalytics, isLoading: roomLoading } = useQuery({\n    queryKey: [\"/api/analytics/rooms\"],\n  });\n\n  const { data: serviceAnalytics, isLoading: serviceLoading } = useQuery({\n    queryKey: [\"/api/analytics/services\"],\n  });\n\n  const { data: stats } = useQuery({\n    queryKey: [\"/api/analytics/stats\"],\n  });\n\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4'];\n\n  if (roomLoading || serviceLoading) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-white to-blue-50/50 shadow-sm border-b border-gray-100 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">\n              Reports & Analytics\n            </h2>\n            <p className=\"text-sm text-gray-600 mt-1\">\n              Comprehensive insights into your hotel operations\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-sm\">\n              Live Data\n            </Badge>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50/30 to-blue-50/20\">\n        <Tabs defaultValue=\"rooms\" className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-white shadow-lg border-0 h-14\">\n            <TabsTrigger value=\"rooms\" className=\"flex items-center space-x-2\">\n              <Bed className=\"w-4 h-4\" />\n              <span>Room Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"services\" className=\"flex items-center space-x-2\">\n              <Activity className=\"w-4 h-4\" />\n              <span>Service Analytics</span>\n            </TabsTrigger>\n            <TabsTrigger value=\"overview\" className=\"flex items-center space-x-2\">\n              <BarChart3 className=\"w-4 h-4\" />\n              <span>Overview</span>\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Room Analytics Tab */}\n          <TabsContent value=\"rooms\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Most Booked Room Types */}\n              <Card className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n                    <span>Most Booked Room Types</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={roomAnalytics?.mostBookedRoomTypes || []}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"roomType\" />\n                      <YAxis />\n                      <Tooltip />\n                      <Bar dataKey=\"bookings\" fill=\"#3B82F6\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Room Occupancy Rates */}\n              <Card className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Bed className=\"w-5 h-5 text-green-600\" />\n                    <span>Room Occupancy Rates</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {roomAnalytics?.occupancyByRoomType?.map((room, index) => (\n                      <div key={room.roomType} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">{room.roomType}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {room.occupiedRooms}/{room.totalRooms} rooms occupied\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge \n                            variant={room.occupancyRate > 75 ? \"default\" : room.occupancyRate > 50 ? \"secondary\" : \"outline\"}\n                          >\n                            {room.occupancyRate}%\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Revenue by Room Type */}\n              <Card className=\"border-0 shadow-lg lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <DollarSign className=\"w-5 h-5 text-yellow-600\" />\n                    <span>Revenue by Room Type</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <BarChart data={roomAnalytics?.revenueByRoomType || []}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"roomType\" />\n                      <YAxis />\n                      <Tooltip formatter={(value) => [`₹${value.toLocaleString()}`, 'Revenue']} />\n                      <Bar dataKey=\"revenue\" fill=\"#10B981\" />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Service Analytics Tab */}\n          <TabsContent value=\"services\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Popular Services */}\n              <Card className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Activity className=\"w-5 h-5 text-purple-600\" />\n                    <span>Popular Services</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <ResponsiveContainer width=\"100%\" height={300}>\n                    <PieChart>\n                      <Pie\n                        data={serviceAnalytics?.popularServices || []}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        outerRadius={80}\n                        fill=\"#8884d8\"\n                        dataKey=\"count\"\n                        label={({ serviceType, count }) => `${serviceType}: ${count}`}\n                      >\n                        {serviceAnalytics?.popularServices?.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Pie>\n                      <Tooltip />\n                    </PieChart>\n                  </ResponsiveContainer>\n                </CardContent>\n              </Card>\n\n              {/* Staff Performance */}\n              <Card className=\"border-0 shadow-lg\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Award className=\"w-5 h-5 text-orange-600\" />\n                    <span>Staff Performance</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {serviceAnalytics?.staffPerformance?.map((staff, index) => (\n                      <div key={staff.staffMember} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                        <div>\n                          <p className=\"font-medium\">{staff.staffMember}</p>\n                          <p className=\"text-sm text-gray-600\">\n                            {staff.completedRequests}/{staff.assignedRequests} completed\n                          </p>\n                        </div>\n                        <div className=\"text-right\">\n                          <Badge variant=\"outline\">\n                            {staff.avgTimeFrame}\n                          </Badge>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Service Status Breakdown */}\n              <Card className=\"border-0 shadow-lg lg:col-span-2\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Clock className=\"w-5 h-5 text-indigo-600\" />\n                    <span>Service Request Status</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4\">\n                    {serviceAnalytics?.serviceStatusBreakdown?.map((status, index) => (\n                      <div key={status.status} className=\"text-center p-4 bg-gray-50 rounded-lg\">\n                        <p className=\"text-2xl font-bold text-gray-900\">{status.count}</p>\n                        <p className=\"text-sm font-medium capitalize\">{status.status}</p>\n                        <p className=\"text-xs text-gray-500\">{status.percentage}%</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              {/* Key Metrics */}\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-1\">Total Customers</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{stats?.totalCustomers || 0}</p>\n                      <p className=\"text-sm text-gray-500 mt-2\">All time</p>\n                    </div>\n                    <Users className=\"w-8 h-8 text-blue-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-1\">Occupancy Rate</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{stats?.occupancyRate || 0}%</p>\n                      <p className=\"text-sm text-gray-500 mt-2\">Current</p>\n                    </div>\n                    <Bed className=\"w-8 h-8 text-green-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-1\">Total Revenue</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">₹{stats?.totalRevenue?.toLocaleString() || 0}</p>\n                      <p className=\"text-sm text-gray-500 mt-2\">All bookings</p>\n                    </div>\n                    <DollarSign className=\"w-8 h-8 text-yellow-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-0 shadow-lg\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"text-sm text-gray-600 mb-1\">Pending Requests</p>\n                      <p className=\"text-3xl font-bold text-gray-900\">{stats?.pendingRequests || 0}</p>\n                      <p className=\"text-sm text-gray-500 mt-2\">Need attention</p>\n                    </div>\n                    <Clock className=\"w-8 h-8 text-red-600\" />\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Revenue and Booking Trends */}\n            <Card className=\"border-0 shadow-lg\">\n              <CardHeader>\n                <CardTitle>Quick Summary</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Top Performing Room Types</h4>\n                    <div className=\"space-y-3\">\n                      {roomAnalytics?.mostBookedRoomTypes?.slice(0, 3).map((room, index) => (\n                        <div key={room.roomType} className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Badge variant=\"outline\">#{index + 1}</Badge>\n                            <span className=\"font-medium\">{room.roomType}</span>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold\">{room.bookings} bookings</p>\n                            <p className=\"text-sm text-gray-600\">₹{room.revenue.toLocaleString()}</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n\n                  <div>\n                    <h4 className=\"font-semibold mb-4\">Service Request Summary</h4>\n                    <div className=\"space-y-3\">\n                      {serviceAnalytics?.popularServices?.slice(0, 3).map((service, index) => (\n                        <div key={service.serviceType} className=\"flex items-center justify-between p-3 bg-green-50 rounded-lg\">\n                          <div className=\"flex items-center space-x-3\">\n                            <Badge variant=\"outline\">#{index + 1}</Badge>\n                            <span className=\"font-medium capitalize\">{service.serviceType.replace('_', ' ')}</span>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"font-bold\">{service.count} requests</p>\n                            <p className=\"text-sm text-gray-600\">{service.completionRate}% completed</p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":15927},"client/src/pages/rooms.tsx":{"content":"import { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Bed, Users, Crown, Home, RefreshCw, QrCode } from \"lucide-react\";\nimport { RoomType } from \"@shared/types\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport RoomManagementModal from \"@/components/room-management-modal\";\nimport RoomQRDisplay from \"@/components/room-qr-display\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\nexport default function Rooms() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const { user } = useAuth();\n  \n  const { data: roomTypes = [], isLoading, isFetching } = useQuery<RoomType[]>({\n    queryKey: [\"/api/room-types\"],\n  });\n\n  const { data: hotel } = useQuery<{ id: string }>({\n    queryKey: [\"/api/hotel\"],\n    enabled: !!user,\n  });\n\n  const handleRefresh = async () => {\n    try {\n      // First recalculate room availability based on actual active customers\n      const response = await fetch('/api/recalculate-rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to recalculate room availability');\n      }\n\n      // Then invalidate all room-related queries to fetch fresh data\n      await queryClient.invalidateQueries({ queryKey: [\"/api/room-types\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/available-rooms\"] });\n      await queryClient.invalidateQueries({ queryKey: [\"/api/analytics/stats\"] });\n      \n      toast({\n        title: \"Refreshed\",\n        description: \"Room availability updated from database\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to refresh room data\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getRoomIcon = (type: string) => {\n    switch (type) {\n      case 'single':\n        return <Bed className=\"h-5 w-5\" />;\n      case 'double':\n      case 'twin':\n      case 'triple':\n        return <Users className=\"h-5 w-5\" />;\n      case 'junior_suite':\n      case 'executive_suite':\n      case 'presidential_suite':\n        return <Crown className=\"h-5 w-5\" />;\n      default:\n        return <Home className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'standard':\n        return 'bg-blue-100 text-blue-800';\n      case 'deluxe':\n        return 'bg-purple-100 text-purple-800';\n      case 'suite':\n        return 'bg-gold-100 text-gold-800';\n      case 'studio':\n        return 'bg-green-100 text-green-800';\n      default:\n        return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getAvailabilityColor = (available: number, total: number) => {\n    const percentage = (available / total) * 100;\n    if (percentage === 0) return 'bg-red-100 text-red-800';\n    if (percentage <= 20) return 'bg-orange-100 text-orange-800';\n    if (percentage <= 50) return 'bg-yellow-100 text-yellow-800';\n    return 'bg-green-100 text-green-800';\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-white to-purple-50/50 shadow-sm border-b border-gray-100 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">Room Management</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Monitor room availability and types across your hotel</p>\n          </div>\n          <Button \n            onClick={handleRefresh}\n            disabled={isFetching}\n            className=\"flex items-center space-x-2\"\n            data-testid=\"button-refresh-rooms\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isFetching ? 'animate-spin' : ''}`} />\n            <span>{isFetching ? 'Refreshing...' : 'Refresh'}</span>\n          </Button>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50/30 to-purple-50/20\">\n        <Tabs defaultValue=\"room-types\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <TabsList>\n              <TabsTrigger value=\"room-types\">Room Types</TabsTrigger>\n              <TabsTrigger value=\"qr-codes\">QR Codes</TabsTrigger>\n            </TabsList>\n            <RoomManagementModal />\n          </div>\n\n          <TabsContent value=\"room-types\">\n            <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n              {roomTypes.map((roomType) => (\n          <Card key={roomType.id} className=\"border-0 shadow-lg bg-gradient-to-br from-white to-purple-50/30 hover:shadow-xl transition-all duration-300 overflow-hidden\">\n            <CardHeader className=\"pb-4\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-purple-500 to-purple-600 rounded-lg flex items-center justify-center\">\n                    {getRoomIcon(roomType.type)}\n                  </div>\n                  <CardTitle className=\"text-xl font-semibold text-gray-800\">{roomType.name}</CardTitle>\n                </div>\n                <Badge className={getCategoryColor(roomType.category)}>\n                  {roomType.category}\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"flex items-center justify-between p-4 bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl\">\n                <span className=\"text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent\">₹{roomType.price.toLocaleString()}</span>\n                <span className=\"text-sm font-medium text-gray-600\">per night</span>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm font-medium\">Availability</span>\n                  <Badge className={`shadow-sm ${getAvailabilityColor(roomType.availableRooms, roomType.totalRooms)}`}>\n                    {roomType.availableRooms}/{roomType.totalRooms} available\n                  </Badge>\n                </div>\n                \n                <div className=\"w-full bg-gray-200 rounded-full h-3 shadow-inner\">\n                  <div \n                    className=\"bg-gradient-to-r from-purple-500 to-blue-600 h-3 rounded-full transition-all duration-500 shadow-sm\"\n                    style={{ \n                      width: `${(roomType.availableRooms / roomType.totalRooms) * 100}%` \n                    }}\n                  />\n                </div>\n              </div>\n\n              {roomType.amenities && roomType.amenities.length > 0 && (\n                <div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">Amenities:</span>\n                  <div className=\"flex flex-wrap gap-1 mt-1\">\n                    {roomType.amenities.map((amenity, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"text-xs\">\n                        {amenity}\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {roomType.description && (\n                <p className=\"text-sm text-muted-foreground\">\n                  {roomType.description}\n                </p>\n              )}\n\n              <div className=\"pt-2 border-t\">\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-muted-foreground\">Type:</span>\n                    <p className=\"font-medium capitalize\">\n                      {roomType.type.replace('_', ' ')}\n                    </p>\n                  </div>\n                  <div>\n                    <span className=\"text-muted-foreground\">Status:</span>\n                    <p className={`font-medium ${roomType.availableRooms > 0 ? 'text-green-600' : 'text-red-600'}`}>\n                      {roomType.availableRooms > 0 ? 'Available' : 'Fully Booked'}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n              ))}\n              \n              {roomTypes.length === 0 && (\n                <div className=\"col-span-full\">\n                  <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-gray-50/30\">\n                    <CardContent className=\"flex flex-col items-center justify-center py-16\">\n                      <div className=\"w-16 h-16 bg-gradient-to-br from-purple-500 to-purple-600 rounded-2xl flex items-center justify-center mb-6\">\n                        <Home className=\"h-8 w-8 text-white\" />\n                      </div>\n                      <h3 className=\"text-xl font-semibold mb-3 text-gray-800\">No Room Types Found</h3>\n                      <p className=\"text-gray-600 text-center max-w-md\">\n                        Room types will be automatically created when you set up your hotel.\n                      </p>\n                    </CardContent>\n                  </Card>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"qr-codes\">\n            <RoomQRDisplay hotelId={hotel?.id} />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":9857},"client/src/pages/service-requests.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Search, Bell, Clock, CheckCircle, XCircle, AlertCircle } from \"lucide-react\";\nimport { ServiceRequest } from \"@shared/types\";\nimport ServiceRequestCard from \"@/components/service-request-card\";\n\nexport default function ServiceRequests() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n\n  const { data: serviceRequests = [], isLoading } = useQuery<ServiceRequest[]>({\n    queryKey: [\"/api/service-requests\"],\n  });\n\n  const filteredRequests = serviceRequests.filter(request =>\n    (request.description ? request.description.toLowerCase().includes(searchTerm.toLowerCase()) : false) ||\n    (request.roomNumber ? request.roomNumber.toLowerCase().includes(searchTerm.toLowerCase()) : false) ||\n    (request.type ? request.type.toLowerCase().includes(searchTerm.toLowerCase()) : false)\n  );\n\n  const pendingRequests = filteredRequests.filter(req => req.status === \"pending\");\n  const assignedRequests = filteredRequests.filter(req => req.status === \"assigned\");\n  const inProgressRequests = filteredRequests.filter(req => req.status === \"in_progress\");\n  const completedRequests = filteredRequests.filter(req => req.status === \"completed\");\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <AlertCircle className=\"w-4 h-4\" />;\n      case \"assigned\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"in_progress\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"completed\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"cancelled\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Bell className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"bg-yellow-100 text-yellow-800\";\n      case \"assigned\":\n        return \"bg-blue-100 text-blue-800\";\n      case \"in_progress\":\n        return \"bg-purple-100 text-purple-800\";\n      case \"completed\":\n        return \"bg-green-100 text-green-800\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-800\";\n      default:\n        return \"bg-gray-100 text-gray-800\";\n    }\n  };\n\n  return (\n    <div className=\"flex-1 flex flex-col overflow-hidden\">\n      {/* Header */}\n      <header className=\"bg-gradient-to-r from-white to-orange-50/50 shadow-sm border-b border-gray-100 px-6 py-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h2 className=\"text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent\">Service Requests</h2>\n            <p className=\"text-sm text-gray-600 mt-1\">Manage and track all guest service requests</p>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge className=\"bg-gradient-to-r from-blue-500 to-blue-600 text-white shadow-sm\" data-testid=\"badge-total-requests\">\n              Total: {serviceRequests.length}\n            </Badge>\n            <Badge className=\"bg-gradient-to-r from-red-500 to-red-600 text-white shadow-sm\" data-testid=\"badge-pending-requests\">\n              Pending: {pendingRequests.length}\n            </Badge>\n          </div>\n        </div>\n      </header>\n\n      {/* Content */}\n      <main className=\"flex-1 overflow-y-auto p-6 bg-gradient-to-br from-gray-50/30 to-orange-50/20\">\n        {/* Search */}\n        <Card className=\"mb-8 border-0 shadow-lg bg-gradient-to-r from-white to-gray-50/50\">\n          <CardContent className=\"p-6\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"Search by description, room number, or type...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-requests\"\n              />\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Status Tabs */}\n        <Tabs defaultValue=\"pending\" className=\"space-y-8\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-white shadow-lg border-0 h-14\">\n            <TabsTrigger value=\"pending\" className=\"flex items-center space-x-2 data-[state=active]:bg-gradient-to-r data-[state=active]:from-yellow-500 data-[state=active]:to-yellow-600 data-[state=active]:text-white\">\n              {getStatusIcon(\"pending\")}\n              <span>Pending</span>\n              <Badge className=\"bg-yellow-100 text-yellow-800 shadow-sm\">\n                {pendingRequests.length}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"assigned\" className=\"flex items-center space-x-2\">\n              {getStatusIcon(\"assigned\")}\n              <span>Assigned</span>\n              <Badge variant=\"secondary\" className={getStatusColor(\"assigned\")}>\n                {assignedRequests.length}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"in_progress\" className=\"flex items-center space-x-2\">\n              {getStatusIcon(\"in_progress\")}\n              <span>In Progress</span>\n              <Badge variant=\"secondary\" className={getStatusColor(\"in_progress\")}>\n                {inProgressRequests.length}\n              </Badge>\n            </TabsTrigger>\n            <TabsTrigger value=\"completed\" className=\"flex items-center space-x-2\">\n              {getStatusIcon(\"completed\")}\n              <span>Completed</span>\n              <Badge variant=\"secondary\" className={getStatusColor(\"completed\")}>\n                {completedRequests.length}\n              </Badge>\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"pending\">\n            <Card className=\"border-0 shadow-lg bg-gradient-to-br from-white to-yellow-50/30\">\n              <CardHeader className=\"pb-4\">\n                <CardTitle className=\"flex items-center space-x-3 text-xl font-semibold text-gray-800\">\n                  <div className=\"w-8 h-8 bg-gradient-to-br from-yellow-500 to-yellow-600 rounded-lg flex items-center justify-center\">\n                    <AlertCircle className=\"w-4 h-4 text-white\" />\n                  </div>\n                  <span>Pending Requests</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isLoading ? (\n                  <div className=\"text-center py-8\">Loading service requests...</div>\n                ) : pendingRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No pending requests\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {pendingRequests.map((request) => (\n                      <ServiceRequestCard key={request.id} request={request} />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"assigned\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5 text-blue-600\" />\n                  <span>Assigned Requests</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {assignedRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No assigned requests\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {assignedRequests.map((request) => (\n                      <ServiceRequestCard key={request.id} request={request} />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"in_progress\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Clock className=\"w-5 h-5 text-purple-600\" />\n                  <span>In Progress</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {inProgressRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No requests in progress\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {inProgressRequests.map((request) => (\n                      <ServiceRequestCard key={request.id} request={request} />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"completed\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\n                  <span>Completed Requests</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {completedRequests.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No completed requests\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {completedRequests.map((request) => (\n                      <ServiceRequestCard key={request.id} request={request} />\n                    ))}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n","size_bytes":10009},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},".local/state/replit/agent/progress_tracker.md":{"content":"[x] 1. Install the required packages\n[x] 2. Restart the workflow to see if the project is working\n[x] 3. Verify the project is working using the feedback tool\n[x] 4. Fixed Vercel deployment 500 errors on /api/auth/user endpoint\n[x] 5. Inform user the import is completed and they can start building, mark the import as completed using the complete_project_import tool","size_bytes":367},"api/analytics/stats.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // Only allow GET requests\n    if (req.method !== 'GET') {\n      res.status(405).json({ message: 'Method not allowed' });\n      return;\n    }\n\n    // For demo purposes, return demo stats\n    // In production, implement proper database operations\n    res.status(200).json({\n      totalCustomers: 25,\n      occupiedRooms: 18,\n      totalRooms: 50,\n      pendingRequests: 3,\n      completedRequests: 42,\n      totalRevenue: 125000,\n      occupancyRate: 0.36\n    });\n\n  } catch (error) {\n    console.error('Analytics endpoint error:', error);\n    res.status(500).json({\n      message: 'Analytics service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1212},"api/auth/user.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // Only allow GET requests\n    if (req.method !== 'GET') {\n      res.status(405).json({ message: 'Method not allowed' });\n      return;\n    }\n\n    // For demo purposes, return a demo user\n    // In production, implement proper authentication\n    res.status(200).json({\n      id: 'demo-user',\n      email: 'demo@hotel.com',\n      name: 'Demo User'\n    });\n\n  } catch (error) {\n    console.error('Auth endpoint error:', error);\n    res.status(500).json({\n      message: 'Authentication service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1104},"api/available-rooms.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // Only allow GET requests\n    if (req.method !== 'GET') {\n      res.status(405).json({ message: 'Method not allowed' });\n      return;\n    }\n\n    // For demo purposes, return demo available rooms\n    // In production, implement proper database operations\n    res.status(200).json({\n      'room-type-1': ['101', '102', '103', '104', '105', '106', '107', '108'],\n      'room-type-2': ['201', '202', '203', '204', '205'],\n      'room-type-3': ['301', '302']\n    });\n\n  } catch (error) {\n    console.error('Available rooms endpoint error:', error);\n    res.status(500).json({\n      message: 'Available rooms service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1225},"api/customers.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // For demo purposes, return demo customers\n    // In production, implement proper database operations\n    if (req.method === 'GET') {\n      res.status(200).json([\n        {\n          id: 'demo-customer-1',\n          name: 'John Doe',\n          email: 'john@example.com',\n          phone: '+1-234-567-8901',\n          roomNumber: '101',\n          roomType: 'Standard Single',\n          roomTypeName: 'Standard Single',\n          roomPrice: 2500,\n          checkinTime: new Date().toISOString(),\n          isActive: true,\n          expectedStayDays: 3,\n          hotelId: 'demo-hotel'\n        }\n      ]);\n    } else if (req.method === 'POST') {\n      res.status(201).json({\n        id: 'demo-customer-new',\n        ...req.body,\n        hotelId: 'demo-hotel'\n      });\n    } else {\n      res.status(405).json({ message: 'Method not allowed' });\n    }\n\n  } catch (error) {\n    console.error('Customers endpoint error:', error);\n    res.status(500).json({\n      message: 'Customers service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1617},"api/hotel.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // For demo purposes, return a demo hotel\n    // In production, implement proper database operations\n    if (req.method === 'GET') {\n      res.status(200).json({\n        id: 'demo-hotel',\n        name: 'Demo Hotel',\n        address: '123 Demo Street',\n        phone: '+1-234-567-8900',\n        email: 'contact@demohotel.com',\n        ownerId: 'demo-user'\n      });\n    } else if (req.method === 'POST') {\n      res.status(201).json({\n        id: 'demo-hotel',\n        name: req.body.name || 'Demo Hotel',\n        address: req.body.address || '123 Demo Street',\n        phone: req.body.phone || '+1-234-567-8900',\n        email: req.body.email || 'contact@demohotel.com',\n        ownerId: 'demo-user'\n      });\n    } else {\n      res.status(405).json({ message: 'Method not allowed' });\n    }\n\n  } catch (error) {\n    console.error('Hotel endpoint error:', error);\n    res.status(500).json({\n      message: 'Hotel service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1544},"api/room-types.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // For demo purposes, return demo room types\n    // In production, implement proper database operations\n    if (req.method === 'GET') {\n      res.status(200).json([\n        {\n          id: 'room-type-1',\n          name: 'Standard Single',\n          category: 'standard',\n          price: 2500,\n          available: 8,\n          total: 10,\n          hotelId: 'demo-hotel'\n        },\n        {\n          id: 'room-type-2',\n          name: 'Deluxe Double',\n          category: 'deluxe',\n          price: 4500,\n          available: 5,\n          total: 8,\n          hotelId: 'demo-hotel'\n        },\n        {\n          id: 'room-type-3',\n          name: 'Executive Suite',\n          category: 'suite',\n          price: 8500,\n          available: 2,\n          total: 3,\n          hotelId: 'demo-hotel'\n        }\n      ]);\n    } else if (req.method === 'POST') {\n      res.status(201).json({\n        id: 'room-type-new',\n        ...req.body,\n        hotelId: 'demo-hotel'\n      });\n    } else {\n      res.status(405).json({ message: 'Method not allowed' });\n    }\n\n  } catch (error) {\n    console.error('Room types endpoint error:', error);\n    res.status(500).json({\n      message: 'Room types service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1827},"api/rooms.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // For demo purposes, return demo rooms\n    // In production, implement proper database operations\n    if (req.method === 'GET') {\n      res.status(200).json([\n        {\n          id: 'room-1',\n          roomNumber: '101',\n          roomType: 'Standard Single',\n          isOccupied: true,\n          hotelId: 'demo-hotel',\n          qrCode: 'qr-code-data-101'\n        },\n        {\n          id: 'room-2',\n          roomNumber: '102',\n          roomType: 'Standard Single',\n          isOccupied: false,\n          hotelId: 'demo-hotel',\n          qrCode: 'qr-code-data-102'\n        },\n        {\n          id: 'room-3',\n          roomNumber: '201',\n          roomType: 'Deluxe Double',\n          isOccupied: true,\n          hotelId: 'demo-hotel',\n          qrCode: 'qr-code-data-201'\n        }\n      ]);\n    } else if (req.method === 'POST') {\n      res.status(201).json({\n        id: 'room-new',\n        ...req.body,\n        hotelId: 'demo-hotel'\n      });\n    } else {\n      res.status(405).json({ message: 'Method not allowed' });\n    }\n\n  } catch (error) {\n    console.error('Rooms endpoint error:', error);\n    res.status(500).json({\n      message: 'Rooms service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1797},"api/service-requests.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // For demo purposes, return demo service requests\n    // In production, implement proper database operations\n    if (req.method === 'GET') {\n      res.status(200).json([\n        {\n          id: 'demo-request-1',\n          type: 'maintenance',\n          description: 'Air conditioning not working',\n          status: 'pending',\n          priority: 'high',\n          roomNumber: '101',\n          customerName: 'John Doe',\n          createdAt: new Date().toISOString(),\n          hotelId: 'demo-hotel'\n        }\n      ]);\n    } else if (req.method === 'POST') {\n      res.status(201).json({\n        id: 'demo-request-new',\n        ...req.body,\n        status: 'pending',\n        createdAt: new Date().toISOString(),\n        hotelId: 'demo-hotel'\n      });\n    } else {\n      res.status(405).json({ message: 'Method not allowed' });\n    }\n\n  } catch (error) {\n    console.error('Service requests endpoint error:', error);\n    res.status(500).json({\n      message: 'Service requests service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1618},"api/login.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // Only allow POST requests\n    if (req.method !== 'POST') {\n      res.status(405).json({ message: 'Method not allowed' });\n      return;\n    }\n\n    const { email, password } = req.body;\n\n    // For demo purposes, accept any credentials\n    // In production, implement proper authentication\n    if (email && password) {\n      res.status(200).json({\n        message: 'Login successful',\n        user: {\n          id: 'demo-user',\n          email: email,\n          name: 'Demo User'\n        },\n        token: 'demo-token-' + Date.now()\n      });\n    } else {\n      res.status(400).json({ message: 'Email and password required' });\n    }\n\n  } catch (error) {\n    console.error('Login endpoint error:', error);\n    res.status(500).json({\n      message: 'Login service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1377},"api/register.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    // Add CORS headers\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n\n    // Handle OPTIONS request for CORS\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n\n    // Only allow POST requests\n    if (req.method !== 'POST') {\n      res.status(405).json({ message: 'Method not allowed' });\n      return;\n    }\n\n    const { email, password, hotelName, address, phone } = req.body;\n\n    // For demo purposes, accept any registration\n    // In production, implement proper validation and user creation\n    if (email && password && hotelName) {\n      res.status(201).json({\n        message: 'Registration successful',\n        user: {\n          id: 'demo-user',\n          email: email,\n          name: 'Demo User'\n        },\n        hotel: {\n          id: 'demo-hotel',\n          name: hotelName,\n          address: address || '123 Demo Street',\n          phone: phone || '+1-234-567-8900',\n          email: email,\n          ownerId: 'demo-user'\n        },\n        token: 'demo-token-' + Date.now()\n      });\n    } else {\n      res.status(400).json({ message: 'Email, password, and hotel name are required' });\n    }\n\n  } catch (error) {\n    console.error('Register endpoint error:', error);\n    res.status(500).json({\n      message: 'Registration service unavailable',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    });\n  }\n}","size_bytes":1698}},"version":1}